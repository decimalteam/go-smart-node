// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/client/tendermint/v1/types.proto

package tmservice

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/abci/types"
	types1 "github.com/tendermint/tendermint/proto/tendermint/types"
	_ "github.com/tendermint/tendermint/proto/tendermint/version"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxResult struct {
	Hash     []byte                   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height   int64                    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Index    uint32                   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	TxResult *types.ResponseDeliverTx `protobuf:"bytes,4,opt,name=tx_result,json=txResult,proto3" json:"tx_result,omitempty"`
	Tx       []byte                   `protobuf:"bytes,5,opt,name=tx,proto3" json:"tx,omitempty"`
	TxProof  *types1.TxProof          `protobuf:"bytes,6,opt,name=tx_proof,json=txProof,proto3" json:"tx_proof,omitempty"`
}

func (m *TxResult) Reset()         { *m = TxResult{} }
func (m *TxResult) String() string { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()    {}
func (*TxResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d019d51821116af, []int{0}
}
func (m *TxResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResult.Merge(m, src)
}
func (m *TxResult) XXX_Size() int {
	return m.Size()
}
func (m *TxResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResult.DiscardUnknown(m)
}

var xxx_messageInfo_TxResult proto.InternalMessageInfo

func (m *TxResult) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResult) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResult) GetTxResult() *types.ResponseDeliverTx {
	if m != nil {
		return m.TxResult
	}
	return nil
}

func (m *TxResult) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxResult) GetTxProof() *types1.TxProof {
	if m != nil {
		return m.TxProof
	}
	return nil
}

type BlockResults struct {
	Height                int64                      `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	TxsResults            []*types.ResponseDeliverTx `protobuf:"bytes,2,rep,name=txs_results,json=txsResults,proto3" json:"txs_results,omitempty"`
	BeginBlockEvents      []*types.Event             `protobuf:"bytes,3,rep,name=begin_block_events,json=beginBlockEvents,proto3" json:"begin_block_events,omitempty"`
	EndBlockEvents        []*types.Event             `protobuf:"bytes,4,rep,name=end_block_events,json=endBlockEvents,proto3" json:"end_block_events,omitempty"`
	ValidatorUpdates      []*types.ValidatorUpdate   `protobuf:"bytes,5,rep,name=validator_updates,json=validatorUpdates,proto3" json:"validator_updates,omitempty"`
	ConsensusParamUpdates *types.ConsensusParams     `protobuf:"bytes,6,opt,name=consensus_param_updates,json=consensusParamUpdates,proto3" json:"consensus_param_updates,omitempty"`
}

func (m *BlockResults) Reset()         { *m = BlockResults{} }
func (m *BlockResults) String() string { return proto.CompactTextString(m) }
func (*BlockResults) ProtoMessage()    {}
func (*BlockResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d019d51821116af, []int{1}
}
func (m *BlockResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResults.Merge(m, src)
}
func (m *BlockResults) XXX_Size() int {
	return m.Size()
}
func (m *BlockResults) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResults.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResults proto.InternalMessageInfo

func (m *BlockResults) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockResults) GetTxsResults() []*types.ResponseDeliverTx {
	if m != nil {
		return m.TxsResults
	}
	return nil
}

func (m *BlockResults) GetBeginBlockEvents() []*types.Event {
	if m != nil {
		return m.BeginBlockEvents
	}
	return nil
}

func (m *BlockResults) GetEndBlockEvents() []*types.Event {
	if m != nil {
		return m.EndBlockEvents
	}
	return nil
}

func (m *BlockResults) GetValidatorUpdates() []*types.ValidatorUpdate {
	if m != nil {
		return m.ValidatorUpdates
	}
	return nil
}

func (m *BlockResults) GetConsensusParamUpdates() *types.ConsensusParams {
	if m != nil {
		return m.ConsensusParamUpdates
	}
	return nil
}

func init() {
	proto.RegisterType((*TxResult)(nil), "decimal.client.tendermint.v1.TxResult")
	proto.RegisterType((*BlockResults)(nil), "decimal.client.tendermint.v1.BlockResults")
}

func init() {
	proto.RegisterFile("decimal/client/tendermint/v1/types.proto", fileDescriptor_1d019d51821116af)
}

var fileDescriptor_1d019d51821116af = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0x7c, 0x11, 0xb6, 0xa5, 0x0a, 0x56, 0x29, 0x26, 0x54, 0xc6, 0xca, 0x29, 0x97,
	0xda, 0x2a, 0x70, 0x45, 0xa0, 0xb6, 0x1c, 0x91, 0x2a, 0x2b, 0x7c, 0x88, 0x8b, 0xb5, 0xb6, 0xa7,
	0xce, 0xaa, 0xf6, 0xae, 0xb5, 0x3b, 0xb1, 0xcc, 0x5b, 0xf0, 0x00, 0x3c, 0x10, 0xc7, 0x4a, 0x5c,
	0x38, 0xa2, 0xe4, 0x45, 0x90, 0xd7, 0x0e, 0xd8, 0x8a, 0x84, 0xb8, 0xed, 0xee, 0xfc, 0xe6, 0xe7,
	0xff, 0xd8, 0x5e, 0xb2, 0x88, 0x21, 0x62, 0x19, 0x4d, 0xbd, 0x28, 0x65, 0xc0, 0xd1, 0x43, 0xe0,
	0x31, 0xc8, 0x8c, 0x71, 0xf4, 0x8a, 0x73, 0x0f, 0xbf, 0xe4, 0xa0, 0xdc, 0x5c, 0x0a, 0x14, 0xe6,
	0x69, 0x43, 0xba, 0x35, 0xe9, 0xfe, 0x25, 0xdd, 0xe2, 0x7c, 0x76, 0x9c, 0x88, 0x44, 0x68, 0xd0,
	0xab, 0x56, 0x75, 0xcf, 0xec, 0xb4, 0xa5, 0xd3, 0xae, 0xb6, 0x71, 0xf6, 0xb4, 0x55, 0xa5, 0x61,
	0xc4, 0x3a, 0xc5, 0x67, 0x7b, 0xad, 0x50, 0xb0, 0x18, 0x78, 0x04, 0x0d, 0x60, 0xb7, 0xa3, 0x82,
	0x54, 0x4c, 0xf0, 0xae, 0x20, 0x11, 0x22, 0x49, 0xc1, 0xd3, 0xbb, 0x70, 0x7d, 0xe3, 0x21, 0xcb,
	0x40, 0x21, 0xcd, 0xf2, 0x1a, 0x98, 0xff, 0x30, 0xc8, 0x64, 0x59, 0xfa, 0xa0, 0xd6, 0x29, 0x9a,
	0x26, 0x19, 0xae, 0xa8, 0x5a, 0x59, 0x86, 0x63, 0x2c, 0x0e, 0x7d, 0xbd, 0x36, 0x4f, 0xc8, 0x78,
	0x05, 0x2c, 0x59, 0xa1, 0xd5, 0x77, 0x8c, 0xc5, 0xc0, 0x6f, 0x76, 0xe6, 0x31, 0x19, 0x31, 0x1e,
	0x43, 0x69, 0x0d, 0x1c, 0x63, 0xf1, 0xc0, 0xaf, 0x37, 0xe6, 0x6b, 0x72, 0x1f, 0xcb, 0x40, 0x6a,
	0x9d, 0x35, 0x74, 0x8c, 0xc5, 0xc1, 0xf3, 0x79, 0xfb, 0x25, 0x55, 0x13, 0xba, 0x3e, 0xa8, 0x5c,
	0x70, 0x05, 0x57, 0x90, 0xb2, 0x02, 0xe4, 0xb2, 0xf4, 0x27, 0xb8, 0x8b, 0x70, 0x44, 0xfa, 0x58,
	0x5a, 0x23, 0x1d, 0xa0, 0x8f, 0xa5, 0xf9, 0x92, 0x4c, 0xb0, 0x0c, 0x72, 0x29, 0xc4, 0x8d, 0x35,
	0xd6, 0xbe, 0x27, 0x6d, 0x5f, 0x3d, 0xeb, 0xb2, 0xbc, 0xae, 0x00, 0xff, 0x1e, 0xd6, 0x8b, 0xf9,
	0xb7, 0x01, 0x39, 0xbc, 0x48, 0x45, 0x74, 0x5b, 0x5b, 0x55, 0x6b, 0x0a, 0xa3, 0x33, 0xc5, 0x25,
	0x39, 0xc0, 0x52, 0x35, 0x81, 0x95, 0xd5, 0x77, 0x06, 0xff, 0x99, 0x98, 0x60, 0xa9, 0x76, 0xf2,
	0x2b, 0x62, 0x86, 0x90, 0x30, 0x1e, 0x84, 0xd5, 0x23, 0x03, 0x28, 0x80, 0xa3, 0xb2, 0x06, 0xda,
	0x75, 0xb2, 0xe7, 0x7a, 0x5b, 0x95, 0xfd, 0xa9, 0xee, 0xd0, 0x19, 0xf5, 0x81, 0x32, 0xdf, 0x90,
	0x29, 0xf0, 0xb8, 0xeb, 0x18, 0xfe, 0xd3, 0x71, 0x04, 0x3c, 0x6e, 0x1b, 0xde, 0x91, 0x87, 0x05,
	0x4d, 0x59, 0x4c, 0x51, 0xc8, 0x60, 0x9d, 0xc7, 0x14, 0x41, 0x59, 0x23, 0xad, 0x70, 0xf6, 0x14,
	0x1f, 0x76, 0xe4, 0x7b, 0x0d, 0xfa, 0xd3, 0xa2, 0x7b, 0xa0, 0xcc, 0x4f, 0xe4, 0x71, 0x54, 0x0d,
	0xcd, 0xd5, 0x5a, 0x05, 0x39, 0x95, 0x34, 0xfb, 0x23, 0xad, 0xbf, 0xc4, 0xbe, 0xf4, 0x72, 0xc7,
	0x5f, 0x57, 0xb8, 0xf2, 0x1f, 0x45, 0x9d, 0x83, 0xc6, 0x7c, 0xf1, 0xf1, 0xfb, 0xc6, 0x36, 0xee,
	0x36, 0xb6, 0xf1, 0x6b, 0x63, 0x1b, 0x5f, 0xb7, 0x76, 0xef, 0x6e, 0x6b, 0xf7, 0x7e, 0x6e, 0xed,
	0xde, 0xe7, 0x57, 0x21, 0xc3, 0x70, 0x1d, 0xdd, 0x02, 0xba, 0x42, 0x26, 0x5e, 0x73, 0xdb, 0x10,
	0x68, 0xe6, 0x25, 0xe2, 0x4c, 0x65, 0x54, 0xe2, 0x19, 0x17, 0x31, 0xec, 0x6e, 0x6a, 0x22, 0xf3,
	0xc8, 0xc3, 0x4c, 0x81, 0x2c, 0x58, 0x04, 0xe1, 0x58, 0xff, 0xd4, 0x2f, 0x7e, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x8f, 0x64, 0x6f, 0x04, 0xd1, 0x03, 0x00, 0x00,
}

func (m *TxResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxProof != nil {
		{
			size, err := m.TxProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TxResult != nil {
		{
			size, err := m.TxResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusParamUpdates != nil {
		{
			size, err := m.ConsensusParamUpdates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorUpdates) > 0 {
		for iNdEx := len(m.ValidatorUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.EndBlockEvents) > 0 {
		for iNdEx := len(m.EndBlockEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EndBlockEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BeginBlockEvents) > 0 {
		for iNdEx := len(m.BeginBlockEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BeginBlockEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TxsResults) > 0 {
		for iNdEx := len(m.TxsResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxsResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	if m.TxResult != nil {
		l = m.TxResult.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TxProof != nil {
		l = m.TxProof.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BlockResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if len(m.TxsResults) > 0 {
		for _, e := range m.TxsResults {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BeginBlockEvents) > 0 {
		for _, e := range m.BeginBlockEvents {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.EndBlockEvents) > 0 {
		for _, e := range m.EndBlockEvents {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ValidatorUpdates) > 0 {
		for _, e := range m.ValidatorUpdates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ConsensusParamUpdates != nil {
		l = m.ConsensusParamUpdates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxResult == nil {
				m.TxResult = &types.ResponseDeliverTx{}
			}
			if err := m.TxResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxProof == nil {
				m.TxProof = &types1.TxProof{}
			}
			if err := m.TxProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsResults = append(m.TxsResults, &types.ResponseDeliverTx{})
			if err := m.TxsResults[len(m.TxsResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginBlockEvents = append(m.BeginBlockEvents, &types.Event{})
			if err := m.BeginBlockEvents[len(m.BeginBlockEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlockEvents = append(m.EndBlockEvents, &types.Event{})
			if err := m.EndBlockEvents[len(m.EndBlockEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorUpdates = append(m.ValidatorUpdates, &types.ValidatorUpdate{})
			if err := m.ValidatorUpdates[len(m.ValidatorUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusParamUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusParamUpdates == nil {
				m.ConsensusParamUpdates = &types.ConsensusParams{}
			}
			if err := m.ConsensusParamUpdates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
