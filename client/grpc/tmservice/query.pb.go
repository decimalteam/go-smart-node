// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/client/tendermint/v1/query.proto

package tmservice

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/tendermint/tendermint/proto/tendermint/p2p"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetBlockchainInfoRequest is the request type for the Query/GetBlockchainInfo RPC method.
type GetBlockchainInfoRequest struct {
	MinHeight int64 `protobuf:"varint,1,opt,name=min_height,json=minHeight,proto3" json:"min_height,omitempty"`
	MaxHeight int64 `protobuf:"varint,2,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
}

func (m *GetBlockchainInfoRequest) Reset()         { *m = GetBlockchainInfoRequest{} }
func (m *GetBlockchainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainInfoRequest) ProtoMessage()    {}
func (*GetBlockchainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d51268fb8c92211, []int{0}
}
func (m *GetBlockchainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainInfoRequest.Merge(m, src)
}
func (m *GetBlockchainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainInfoRequest proto.InternalMessageInfo

func (m *GetBlockchainInfoRequest) GetMinHeight() int64 {
	if m != nil {
		return m.MinHeight
	}
	return 0
}

func (m *GetBlockchainInfoRequest) GetMaxHeight() int64 {
	if m != nil {
		return m.MaxHeight
	}
	return 0
}

// GetBlockchainInfoResponse is the request type for the Query/GetBlockchainInfo RPC method.
type GetBlockchainInfoResponse struct {
	BlockMetas []*types.BlockMeta `protobuf:"bytes,1,rep,name=BlockMetas,proto3" json:"BlockMetas,omitempty"`
}

func (m *GetBlockchainInfoResponse) Reset()         { *m = GetBlockchainInfoResponse{} }
func (m *GetBlockchainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainInfoResponse) ProtoMessage()    {}
func (*GetBlockchainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d51268fb8c92211, []int{1}
}
func (m *GetBlockchainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainInfoResponse.Merge(m, src)
}
func (m *GetBlockchainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainInfoResponse proto.InternalMessageInfo

func (m *GetBlockchainInfoResponse) GetBlockMetas() []*types.BlockMeta {
	if m != nil {
		return m.BlockMetas
	}
	return nil
}

// GetTxSearchRequest is the request type for the Query/GetBlockchainInfo RPC method.
type GetTxSearchRequest struct {
	Query   string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Prove   bool   `protobuf:"varint,2,opt,name=prove,proto3" json:"prove,omitempty"`
	Page    int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int64  `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (m *GetTxSearchRequest) Reset()         { *m = GetTxSearchRequest{} }
func (m *GetTxSearchRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxSearchRequest) ProtoMessage()    {}
func (*GetTxSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d51268fb8c92211, []int{2}
}
func (m *GetTxSearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxSearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxSearchRequest.Merge(m, src)
}
func (m *GetTxSearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTxSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxSearchRequest proto.InternalMessageInfo

func (m *GetTxSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GetTxSearchRequest) GetProve() bool {
	if m != nil {
		return m.Prove
	}
	return false
}

func (m *GetTxSearchRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetTxSearchRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *GetTxSearchRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// GetTxSearchResponse is the request type for the Query/GetBlockchainInfo RPC method.
type GetTxSearchResponse struct {
	Txs        []*TxResult `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	TotalCount int64       `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *GetTxSearchResponse) Reset()         { *m = GetTxSearchResponse{} }
func (m *GetTxSearchResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxSearchResponse) ProtoMessage()    {}
func (*GetTxSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d51268fb8c92211, []int{3}
}
func (m *GetTxSearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxSearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxSearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxSearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxSearchResponse.Merge(m, src)
}
func (m *GetTxSearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTxSearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxSearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxSearchResponse proto.InternalMessageInfo

func (m *GetTxSearchResponse) GetTxs() []*TxResult {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *GetTxSearchResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type GetBlockResultsRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockResultsRequest) Reset()         { *m = GetBlockResultsRequest{} }
func (m *GetBlockResultsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockResultsRequest) ProtoMessage()    {}
func (*GetBlockResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d51268fb8c92211, []int{4}
}
func (m *GetBlockResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockResultsRequest.Merge(m, src)
}
func (m *GetBlockResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockResultsRequest proto.InternalMessageInfo

func (m *GetBlockResultsRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBlockResultsResponse struct {
	BlockResults *BlockResults `protobuf:"bytes,1,opt,name=block_results,json=blockResults,proto3" json:"block_results,omitempty"`
}

func (m *GetBlockResultsResponse) Reset()         { *m = GetBlockResultsResponse{} }
func (m *GetBlockResultsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockResultsResponse) ProtoMessage()    {}
func (*GetBlockResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d51268fb8c92211, []int{5}
}
func (m *GetBlockResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockResultsResponse.Merge(m, src)
}
func (m *GetBlockResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockResultsResponse proto.InternalMessageInfo

func (m *GetBlockResultsResponse) GetBlockResults() *BlockResults {
	if m != nil {
		return m.BlockResults
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBlockchainInfoRequest)(nil), "decimal.client.tendermint.v1.GetBlockchainInfoRequest")
	proto.RegisterType((*GetBlockchainInfoResponse)(nil), "decimal.client.tendermint.v1.GetBlockchainInfoResponse")
	proto.RegisterType((*GetTxSearchRequest)(nil), "decimal.client.tendermint.v1.GetTxSearchRequest")
	proto.RegisterType((*GetTxSearchResponse)(nil), "decimal.client.tendermint.v1.GetTxSearchResponse")
	proto.RegisterType((*GetBlockResultsRequest)(nil), "decimal.client.tendermint.v1.GetBlockResultsRequest")
	proto.RegisterType((*GetBlockResultsResponse)(nil), "decimal.client.tendermint.v1.GetBlockResultsResponse")
}

func init() {
	proto.RegisterFile("decimal/client/tendermint/v1/query.proto", fileDescriptor_0d51268fb8c92211)
}

var fileDescriptor_0d51268fb8c92211 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0x66, 0x29, 0x3f, 0xa7, 0x1a, 0xe3, 0x48, 0xb0, 0x5d, 0xb1, 0x92, 0x4d, 0x34, 0xd8, 0x84,
	0x1d, 0x5a, 0xf1, 0x47, 0x30, 0x5e, 0x30, 0x06, 0x3d, 0x10, 0xcd, 0x42, 0x22, 0xf1, 0xb2, 0x99,
	0xdd, 0x3e, 0xb6, 0x2b, 0xdd, 0x99, 0x65, 0x76, 0xda, 0xb4, 0x21, 0x5c, 0x3c, 0x7a, 0x32, 0xf1,
	0x5f, 0xf0, 0x4f, 0xf0, 0xea, 0xdd, 0x23, 0x09, 0x17, 0x8f, 0x06, 0xfc, 0x43, 0x4c, 0x67, 0x76,
	0x61, 0x0b, 0x52, 0xe4, 0xb6, 0xef, 0x7d, 0xef, 0x7b, 0xfb, 0xbd, 0x37, 0xdf, 0x0c, 0x5a, 0x68,
	0x80, 0x1f, 0x46, 0xb4, 0x45, 0xfc, 0x56, 0x08, 0x4c, 0x12, 0x09, 0xac, 0x01, 0x22, 0x0a, 0x99,
	0x24, 0x9d, 0x1a, 0xd9, 0x6d, 0x83, 0xe8, 0xd9, 0xb1, 0xe0, 0x92, 0xe3, 0xb9, 0xb4, 0xd2, 0xd6,
	0x95, 0xf6, 0x69, 0xa5, 0xdd, 0xa9, 0x99, 0x33, 0x01, 0x0f, 0xb8, 0x2a, 0x24, 0xfd, 0x2f, 0xcd,
	0x31, 0xe7, 0x02, 0xce, 0x83, 0x16, 0x10, 0x1a, 0x87, 0x84, 0x32, 0xc6, 0x25, 0x95, 0x21, 0x67,
	0x49, 0x8a, 0x96, 0x53, 0x54, 0x45, 0x5e, 0x7b, 0x9b, 0x50, 0x96, 0xfe, 0xcc, 0x34, 0x73, 0x3a,
	0xe2, 0x7a, 0x4c, 0x64, 0x2f, 0x86, 0x8c, 0x36, 0x97, 0xc3, 0x54, 0x7e, 0x00, 0xad, 0xfa, 0x3c,
	0x89, 0x78, 0x42, 0x3c, 0x9a, 0x80, 0xd6, 0x4f, 0x3a, 0x35, 0x0f, 0x24, 0xad, 0x91, 0x98, 0x06,
	0x21, 0x53, 0x0a, 0xd2, 0xda, 0xe1, 0xc3, 0xe7, 0xbb, 0x96, 0x75, 0x57, 0x57, 0x4f, 0xa8, 0x83,
	0x0b, 0xe5, 0x78, 0x2d, 0xee, 0xef, 0x68, 0xd4, 0xda, 0x42, 0xa5, 0x35, 0x90, 0xab, 0xfd, 0x8c,
	0xdf, 0xa4, 0x21, 0x7b, 0xc3, 0xb6, 0xb9, 0x03, 0xbb, 0x6d, 0x48, 0x24, 0xbe, 0x8b, 0x50, 0x14,
	0x32, 0xb7, 0x09, 0x61, 0xd0, 0x94, 0x25, 0x63, 0xde, 0x58, 0x28, 0x38, 0xd3, 0x51, 0xc8, 0x5e,
	0xab, 0x84, 0x82, 0x69, 0x37, 0x83, 0x47, 0x53, 0x98, 0x76, 0x35, 0x6c, 0x6d, 0xa1, 0xf2, 0x3f,
	0x3a, 0x27, 0x31, 0x67, 0x09, 0xe0, 0xe7, 0x08, 0x29, 0x64, 0x1d, 0x24, 0x4d, 0x4a, 0xc6, 0x7c,
	0x61, 0xa1, 0x58, 0xbf, 0x93, 0x3f, 0x32, 0x3d, 0xdc, 0x49, 0x8d, 0x93, 0x2b, 0xb7, 0x3e, 0x1b,
	0x08, 0xaf, 0x81, 0xdc, 0xec, 0x6e, 0x00, 0x15, 0x7e, 0x33, 0x93, 0x3b, 0x83, 0xc6, 0xd5, 0x3e,
	0x95, 0xd2, 0x69, 0x47, 0x07, 0xfd, 0x6c, 0x2c, 0x78, 0x07, 0x94, 0xc0, 0x29, 0x47, 0x07, 0x18,
	0xa3, 0xb1, 0x98, 0x06, 0x50, 0x2a, 0x28, 0xd5, 0xea, 0x1b, 0x97, 0xd1, 0x54, 0x0c, 0xc2, 0x55,
	0xf9, 0x31, 0x95, 0x9f, 0x8c, 0x41, 0xbc, 0x4b, 0x21, 0x2e, 0x1a, 0x20, 0x5c, 0xaf, 0x57, 0x1a,
	0x57, 0xdd, 0x27, 0x55, 0xbc, 0xda, 0xb3, 0x62, 0x74, 0x6b, 0x40, 0x4b, 0x3a, 0xe0, 0x33, 0x54,
	0x90, 0xdd, 0x6c, 0xb2, 0x07, 0xf6, 0x30, 0x6f, 0xda, 0x9b, 0x5d, 0x07, 0x92, 0x76, 0x4b, 0x3a,
	0x7d, 0x0a, 0xbe, 0x87, 0x8a, 0x92, 0x4b, 0xda, 0x72, 0x7d, 0xde, 0x66, 0xd9, 0x5e, 0x91, 0x4a,
	0xbd, 0xec, 0x67, 0xac, 0x25, 0x34, 0x9b, 0x2d, 0x56, 0xf3, 0x92, 0x6c, 0x03, 0xb3, 0x68, 0x62,
	0xe0, 0xb0, 0xd2, 0xc8, 0xfa, 0x88, 0x6e, 0x9f, 0x63, 0xa4, 0x3a, 0xdf, 0xa2, 0xeb, 0xca, 0x0e,
	0xae, 0xd0, 0x80, 0x62, 0x16, 0xeb, 0xd5, 0xe1, 0x8a, 0x07, 0x5a, 0x5d, 0xf3, 0x72, 0x51, 0xfd,
	0xc7, 0x18, 0x9a, 0xdc, 0x00, 0xd1, 0x09, 0x7d, 0xc0, 0x87, 0x06, 0xba, 0x79, 0xce, 0x03, 0xf8,
	0xc9, 0xf0, 0xde, 0x17, 0xd9, 0xd1, 0x7c, 0x7a, 0x65, 0x9e, 0x9e, 0xd1, 0x5a, 0xff, 0x74, 0xf8,
	0xe7, 0xeb, 0xe8, 0x1a, 0x7e, 0x45, 0xb2, 0xfb, 0xa4, 0x2e, 0xdf, 0xe0, 0x6d, 0xf2, 0x4e, 0xb8,
	0x6e, 0xc8, 0xb6, 0x39, 0xd9, 0x3b, 0xb5, 0xfe, 0x3e, 0xd9, 0x3b, 0x35, 0xfa, 0x3e, 0xfe, 0x66,
	0xa0, 0x62, 0xee, 0xc8, 0xf1, 0xd2, 0xa5, 0xba, 0xce, 0x38, 0xd5, 0xac, 0x5d, 0x81, 0x91, 0xce,
	0xb0, 0xa4, 0x66, 0xa8, 0x5a, 0xf7, 0x87, 0xcd, 0x20, 0xbb, 0x6e, 0xa2, 0x68, 0x2b, 0x46, 0x15,
	0x7f, 0x37, 0xd0, 0x8d, 0x33, 0xa7, 0x8e, 0x97, 0xff, 0x6f, 0x85, 0x83, 0xb6, 0x32, 0x1f, 0x5f,
	0x91, 0x95, 0x4a, 0x5e, 0x56, 0x92, 0x6d, 0xeb, 0xe1, 0xa5, 0x6b, 0xcf, 0xcc, 0xb7, 0x62, 0x54,
	0x57, 0xdf, 0xff, 0x3c, 0xaa, 0x18, 0x07, 0x47, 0x15, 0xe3, 0xf7, 0x51, 0xc5, 0xf8, 0x72, 0x5c,
	0x19, 0x39, 0x38, 0xae, 0x8c, 0xfc, 0x3a, 0xae, 0x8c, 0x7c, 0x78, 0xe1, 0x85, 0xd2, 0x6b, 0xfb,
	0x3b, 0x20, 0x6d, 0x2e, 0x82, 0xac, 0xa9, 0x04, 0x1a, 0x91, 0x80, 0x2f, 0x26, 0x11, 0x15, 0x72,
	0x91, 0xf1, 0x06, 0x64, 0xaf, 0x65, 0x20, 0x62, 0x9f, 0xc8, 0x28, 0xd1, 0x66, 0xf4, 0x26, 0xd4,
	0x83, 0xf7, 0xe8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x1b, 0xb6, 0x70, 0x52, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// GetBlockchainInfo queries blocks meta information
	GetBlockchainInfo(ctx context.Context, in *GetBlockchainInfoRequest, opts ...grpc.CallOption) (*GetBlockchainInfoResponse, error)
	// GetBlockchainInfo queries blocks meta information
	GetTxSearch(ctx context.Context, in *GetTxSearchRequest, opts ...grpc.CallOption) (*GetTxSearchResponse, error)
	GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error)
}

type serviceClient struct {
	cc grpc1.ClientConn
}

func NewServiceClient(cc grpc1.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetBlockchainInfo(ctx context.Context, in *GetBlockchainInfoRequest, opts ...grpc.CallOption) (*GetBlockchainInfoResponse, error) {
	out := new(GetBlockchainInfoResponse)
	err := c.cc.Invoke(ctx, "/decimal.client.tendermint.v1.Service/GetBlockchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTxSearch(ctx context.Context, in *GetTxSearchRequest, opts ...grpc.CallOption) (*GetTxSearchResponse, error) {
	out := new(GetTxSearchResponse)
	err := c.cc.Invoke(ctx, "/decimal.client.tendermint.v1.Service/GetTxSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error) {
	out := new(GetBlockResultsResponse)
	err := c.cc.Invoke(ctx, "/decimal.client.tendermint.v1.Service/GetBlockResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// GetBlockchainInfo queries blocks meta information
	GetBlockchainInfo(context.Context, *GetBlockchainInfoRequest) (*GetBlockchainInfoResponse, error)
	// GetBlockchainInfo queries blocks meta information
	GetTxSearch(context.Context, *GetTxSearchRequest) (*GetTxSearchResponse, error)
	GetBlockResults(context.Context, *GetBlockResultsRequest) (*GetBlockResultsResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) GetBlockchainInfo(ctx context.Context, req *GetBlockchainInfoRequest) (*GetBlockchainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainInfo not implemented")
}
func (*UnimplementedServiceServer) GetTxSearch(ctx context.Context, req *GetTxSearchRequest) (*GetTxSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxSearch not implemented")
}
func (*UnimplementedServiceServer) GetBlockResults(ctx context.Context, req *GetBlockResultsRequest) (*GetBlockResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockResults not implemented")
}

func RegisterServiceServer(s grpc1.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_GetBlockchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBlockchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.client.tendermint.v1.Service/GetBlockchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBlockchainInfo(ctx, req.(*GetBlockchainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTxSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTxSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.client.tendermint.v1.Service/GetTxSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTxSearch(ctx, req.(*GetTxSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetBlockResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBlockResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.client.tendermint.v1.Service/GetBlockResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBlockResults(ctx, req.(*GetBlockResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "decimal.client.tendermint.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockchainInfo",
			Handler:    _Service_GetBlockchainInfo_Handler,
		},
		{
			MethodName: "GetTxSearch",
			Handler:    _Service_GetTxSearch_Handler,
		},
		{
			MethodName: "GetBlockResults",
			Handler:    _Service_GetBlockResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decimal/client/tendermint/v1/query.proto",
}

func (m *GetBlockchainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.MinHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MinHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockMetas) > 0 {
		for iNdEx := len(m.BlockMetas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockMetas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTxSearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxSearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxSearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PerPage != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PerPage))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Prove {
		i--
		if m.Prove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTxSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxSearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockResults != nil {
		{
			size, err := m.BlockResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetBlockchainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinHeight != 0 {
		n += 1 + sovQuery(uint64(m.MinHeight))
	}
	if m.MaxHeight != 0 {
		n += 1 + sovQuery(uint64(m.MaxHeight))
	}
	return n
}

func (m *GetBlockchainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockMetas) > 0 {
		for _, e := range m.BlockMetas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetTxSearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Prove {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovQuery(uint64(m.PerPage))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetTxSearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	return n
}

func (m *GetBlockResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *GetBlockResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockResults != nil {
		l = m.BlockResults.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBlockchainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHeight", wireType)
			}
			m.MinHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeight", wireType)
			}
			m.MaxHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockMetas = append(m.BlockMetas, &types.BlockMeta{})
			if err := m.BlockMetas[len(m.BlockMetas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxSearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxSearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxSearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prove = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &TxResult{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockResults == nil {
				m.BlockResults = &BlockResults{}
			}
			if err := m.BlockResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
