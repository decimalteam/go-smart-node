// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/swap/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgActivateChain defines a SDK message for activating chain to enable cross-chain swaps.
type MsgActivateChain struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ID     uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgActivateChain) Reset()         { *m = MsgActivateChain{} }
func (m *MsgActivateChain) String() string { return proto.CompactTextString(m) }
func (*MsgActivateChain) ProtoMessage()    {}
func (*MsgActivateChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{0}
}
func (m *MsgActivateChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateChain.Merge(m, src)
}
func (m *MsgActivateChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateChain proto.InternalMessageInfo

func (m *MsgActivateChain) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgActivateChain) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MsgActivateChain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// MsgActivateChainResponse defines the Msg/ActivateChain response type.
type MsgActivateChainResponse struct {
}

func (m *MsgActivateChainResponse) Reset()         { *m = MsgActivateChainResponse{} }
func (m *MsgActivateChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateChainResponse) ProtoMessage()    {}
func (*MsgActivateChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{1}
}
func (m *MsgActivateChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateChainResponse.Merge(m, src)
}
func (m *MsgActivateChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateChainResponse proto.InternalMessageInfo

// MsgMintToken defines a SDK message for deactivating chain to disable cross-chain swaps.
type MsgDeactivateChain struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ID     uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeactivateChain) Reset()         { *m = MsgDeactivateChain{} }
func (m *MsgDeactivateChain) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateChain) ProtoMessage()    {}
func (*MsgDeactivateChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{2}
}
func (m *MsgDeactivateChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateChain.Merge(m, src)
}
func (m *MsgDeactivateChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateChain proto.InternalMessageInfo

func (m *MsgDeactivateChain) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeactivateChain) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

// MsgDeactivateChainResponse defines the Msg/DeactivateChain response type.
type MsgDeactivateChainResponse struct {
}

func (m *MsgDeactivateChainResponse) Reset()         { *m = MsgDeactivateChainResponse{} }
func (m *MsgDeactivateChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateChainResponse) ProtoMessage()    {}
func (*MsgDeactivateChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{3}
}
func (m *MsgDeactivateChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateChainResponse.Merge(m, src)
}
func (m *MsgDeactivateChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateChainResponse proto.InternalMessageInfo

// MsgMintToken defines a SDK message for .
type MsgInitializeSwap struct {
	Sender            string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient         string                `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	TokenSymbol       string                `protobuf:"bytes,4,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TransactionNumber string                `protobuf:"bytes,5,opt,name=transaction_number,json=transactionNumber,proto3" json:"transaction_number,omitempty"`
	FromChain         uint32                `protobuf:"varint,6,opt,name=from_chain,json=fromChain,proto3" json:"from_chain,omitempty"`
	DestChain         uint32                `protobuf:"varint,7,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
}

func (m *MsgInitializeSwap) Reset()         { *m = MsgInitializeSwap{} }
func (m *MsgInitializeSwap) String() string { return proto.CompactTextString(m) }
func (*MsgInitializeSwap) ProtoMessage()    {}
func (*MsgInitializeSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{4}
}
func (m *MsgInitializeSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitializeSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitializeSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitializeSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitializeSwap.Merge(m, src)
}
func (m *MsgInitializeSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitializeSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitializeSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitializeSwap proto.InternalMessageInfo

// MsgInitializeSwapResponse defines the Msg/InitializeSwap response type.
type MsgInitializeSwapResponse struct {
}

func (m *MsgInitializeSwapResponse) Reset()         { *m = MsgInitializeSwapResponse{} }
func (m *MsgInitializeSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitializeSwapResponse) ProtoMessage()    {}
func (*MsgInitializeSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{5}
}
func (m *MsgInitializeSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitializeSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitializeSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitializeSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitializeSwapResponse.Merge(m, src)
}
func (m *MsgInitializeSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitializeSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitializeSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitializeSwapResponse proto.InternalMessageInfo

// MsgMintToken defines a SDK message for .
type MsgRedeemSwap struct {
	Sender            string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	From              string                `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Recipient         string                `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	TokenSymbol       string                `protobuf:"bytes,5,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TransactionNumber string                `protobuf:"bytes,6,opt,name=transaction_number,json=transactionNumber,proto3" json:"transaction_number,omitempty"`
	FromChain         uint32                `protobuf:"varint,7,opt,name=from_chain,json=fromChain,proto3" json:"from_chain,omitempty"`
	DestChain         uint32                `protobuf:"varint,8,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	V                 uint32                `protobuf:"varint,9,opt,name=v,proto3" json:"v,omitempty"`
	R                 string                `protobuf:"bytes,10,opt,name=r,proto3" json:"r,omitempty"`
	S                 string                `protobuf:"bytes,11,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *MsgRedeemSwap) Reset()         { *m = MsgRedeemSwap{} }
func (m *MsgRedeemSwap) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemSwap) ProtoMessage()    {}
func (*MsgRedeemSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{6}
}
func (m *MsgRedeemSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemSwap.Merge(m, src)
}
func (m *MsgRedeemSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemSwap proto.InternalMessageInfo

// MsgRedeemSwapResponse defines the Msg/RedeemSwap response type.
type MsgRedeemSwapResponse struct {
}

func (m *MsgRedeemSwapResponse) Reset()         { *m = MsgRedeemSwapResponse{} }
func (m *MsgRedeemSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemSwapResponse) ProtoMessage()    {}
func (*MsgRedeemSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cd30fd052b718b3, []int{7}
}
func (m *MsgRedeemSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemSwapResponse.Merge(m, src)
}
func (m *MsgRedeemSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemSwapResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgActivateChain)(nil), "decimal.swap.v1.MsgActivateChain")
	proto.RegisterType((*MsgActivateChainResponse)(nil), "decimal.swap.v1.MsgActivateChainResponse")
	proto.RegisterType((*MsgDeactivateChain)(nil), "decimal.swap.v1.MsgDeactivateChain")
	proto.RegisterType((*MsgDeactivateChainResponse)(nil), "decimal.swap.v1.MsgDeactivateChainResponse")
	proto.RegisterType((*MsgInitializeSwap)(nil), "decimal.swap.v1.MsgInitializeSwap")
	proto.RegisterType((*MsgInitializeSwapResponse)(nil), "decimal.swap.v1.MsgInitializeSwapResponse")
	proto.RegisterType((*MsgRedeemSwap)(nil), "decimal.swap.v1.MsgRedeemSwap")
	proto.RegisterType((*MsgRedeemSwapResponse)(nil), "decimal.swap.v1.MsgRedeemSwapResponse")
}

func init() { proto.RegisterFile("decimal/swap/v1/tx.proto", fileDescriptor_2cd30fd052b718b3) }

var fileDescriptor_2cd30fd052b718b3 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x93, 0x10, 0x6e, 0x0e, 0x70, 0xb9, 0xcc, 0xe5, 0xc7, 0xf8, 0x82, 0x03, 0xb9, 0x52,
	0x45, 0x41, 0xb1, 0x4b, 0xdb, 0x15, 0x3b, 0x02, 0x9b, 0x2c, 0xc2, 0xc2, 0x74, 0x55, 0xa9, 0x4a,
	0x1d, 0x7b, 0x6a, 0x46, 0x61, 0x66, 0x22, 0xcf, 0x10, 0xa0, 0x52, 0x17, 0xed, 0xaa, 0xcb, 0x3e,
	0x02, 0x8f, 0x50, 0xa9, 0x3c, 0x04, 0x4b, 0xc4, 0xaa, 0xea, 0x02, 0x55, 0x61, 0xd1, 0x6e, 0xfa,
	0x0e, 0x95, 0xc7, 0x26, 0x10, 0x93, 0x02, 0x8b, 0x76, 0x37, 0xe7, 0x7c, 0xdf, 0x39, 0xdf, 0x39,
	0x9f, 0x33, 0x13, 0xd0, 0x7d, 0xec, 0x11, 0xea, 0xee, 0xda, 0x62, 0xdf, 0x6d, 0xdb, 0x9d, 0x55,
	0x5b, 0x1e, 0x58, 0xed, 0x90, 0x4b, 0x8e, 0xc6, 0x13, 0xc4, 0x8a, 0x10, 0xab, 0xb3, 0x6a, 0x4c,
	0x06, 0x3c, 0xe0, 0x0a, 0xb3, 0xa3, 0x53, 0x4c, 0x33, 0x66, 0x3d, 0x2e, 0x28, 0x17, 0x8d, 0x18,
	0x88, 0x83, 0x04, 0x9a, 0x89, 0x23, 0x9b, 0x8a, 0x20, 0xea, 0x4c, 0x45, 0x10, 0x03, 0xe5, 0x37,
	0xf0, 0x4f, 0x5d, 0x04, 0xeb, 0x9e, 0x24, 0x1d, 0x57, 0xe2, 0x8d, 0x1d, 0x97, 0x30, 0xf4, 0x08,
	0x0a, 0x02, 0x33, 0x1f, 0x87, 0xba, 0xb6, 0xa0, 0x2d, 0x15, 0xab, 0xfa, 0xd9, 0x71, 0x65, 0x32,
	0x69, 0xb7, 0xee, 0xfb, 0x21, 0x16, 0x62, 0x5b, 0x86, 0x84, 0x05, 0x4e, 0xc2, 0x43, 0xd3, 0x90,
	0x25, 0xbe, 0x9e, 0x5d, 0xd0, 0x96, 0xc6, 0xaa, 0x85, 0xee, 0x79, 0x29, 0x5b, 0xdb, 0x74, 0xb2,
	0xc4, 0x47, 0x08, 0xf2, 0xcc, 0xa5, 0x58, 0xcf, 0x45, 0x7d, 0x1c, 0x75, 0x5e, 0x1b, 0x79, 0xf7,
	0xed, 0xe3, 0x72, 0x52, 0x58, 0x36, 0x40, 0x4f, 0xcb, 0x3b, 0x58, 0xb4, 0x39, 0x13, 0xb8, 0xdc,
	0x02, 0x54, 0x17, 0xc1, 0x26, 0x76, 0xff, 0xcc, 0x70, 0xfd, 0x83, 0xcc, 0x81, 0x71, 0x53, 0xac,
	0x37, 0xca, 0xa7, 0x2c, 0x4c, 0xd4, 0x45, 0x50, 0x63, 0x44, 0x12, 0x77, 0x97, 0xbc, 0xc6, 0xdb,
	0xfb, 0x6e, 0x1b, 0x4d, 0xf7, 0x8f, 0xd2, 0x13, 0x9c, 0x83, 0x62, 0x88, 0x3d, 0xd2, 0x26, 0x98,
	0x49, 0xa5, 0x5b, 0x74, 0xae, 0x12, 0x68, 0x03, 0x0a, 0x2e, 0xe5, 0x7b, 0x4c, 0xc6, 0xae, 0x54,
	0x57, 0x4e, 0xce, 0x4b, 0x99, 0x2f, 0xe7, 0xa5, 0xa9, 0x78, 0x09, 0xe1, 0xb7, 0x2c, 0xc2, 0x6d,
	0xea, 0xca, 0x1d, 0xab, 0xc6, 0xe4, 0xd9, 0x71, 0x05, 0x92, 0xed, 0x6a, 0x4c, 0x3a, 0x49, 0x29,
	0x5a, 0x84, 0x51, 0xc9, 0x5b, 0x98, 0x35, 0xc4, 0x21, 0x6d, 0xf2, 0x5d, 0x3d, 0xaf, 0x54, 0x46,
	0x54, 0x6e, 0x5b, 0xa5, 0x50, 0x05, 0x90, 0x0c, 0x5d, 0x26, 0xa2, 0x8d, 0x38, 0x6b, 0xb0, 0x3d,
	0xda, 0xc4, 0xa1, 0x3e, 0xa4, 0x88, 0x13, 0xd7, 0x90, 0x2d, 0x05, 0xa0, 0x79, 0x80, 0x57, 0x21,
	0xa7, 0x0d, 0x2f, 0x5a, 0x5c, 0x2f, 0x44, 0x6e, 0x39, 0xc5, 0x28, 0x13, 0xdb, 0x3e, 0x0f, 0xe0,
	0x63, 0x21, 0x13, 0x78, 0x38, 0x86, 0xa3, 0x8c, 0x82, 0xd7, 0xfe, 0x7d, 0x7f, 0x54, 0xca, 0x7c,
	0x3f, 0x2a, 0x65, 0xae, 0x7b, 0xfa, 0x1f, 0xcc, 0xde, 0x30, 0xad, 0x67, 0xe9, 0x8f, 0x2c, 0x8c,
	0xd5, 0x45, 0xe0, 0x60, 0x1f, 0x63, 0x7a, 0xab, 0x9d, 0x08, 0xf2, 0xd1, 0x1c, 0x89, 0x93, 0xea,
	0xdc, 0x6f, 0x71, 0xee, 0xd7, 0x16, 0xe7, 0x7f, 0x9f, 0xc5, 0x43, 0xf7, 0xb5, 0xb8, 0x70, 0x3f,
	0x8b, 0x87, 0x6f, 0xb7, 0xf8, 0xaf, 0x94, 0xc5, 0x68, 0x14, 0xb4, 0x8e, 0x5e, 0x54, 0x59, 0xad,
	0x13, 0x45, 0xa1, 0x0e, 0x4a, 0x49, 0x0b, 0xa3, 0x48, 0xe8, 0x23, 0x71, 0x24, 0x06, 0x7f, 0x8c,
	0x19, 0x98, 0xea, 0xb3, 0xfb, 0xf2, 0x43, 0x3c, 0x7e, 0x9b, 0x83, 0x5c, 0x5d, 0x04, 0xe8, 0x05,
	0x8c, 0xf5, 0x3f, 0x03, 0x8b, 0x56, 0xea, 0xd9, 0xb1, 0xd2, 0x57, 0xd5, 0x78, 0x78, 0x27, 0xe5,
	0x52, 0x06, 0x79, 0x30, 0x9e, 0xbe, 0xca, 0xff, 0x0f, 0xaa, 0x4e, 0x91, 0x8c, 0x95, 0x7b, 0x90,
	0x7a, 0x22, 0x2f, 0xe1, 0xef, 0xd4, 0x1d, 0x2d, 0x0f, 0x2a, 0xef, 0xe7, 0x18, 0xcb, 0x77, 0x73,
	0x7a, 0x0a, 0xcf, 0x00, 0xae, 0xfd, 0x64, 0xcd, 0x41, 0x95, 0x57, 0xb8, 0xf1, 0xe0, 0x76, 0xfc,
	0xb2, 0x6b, 0x75, 0xeb, 0xa4, 0x6b, 0x6a, 0xa7, 0x5d, 0x53, 0xfb, 0xda, 0x35, 0xb5, 0x0f, 0x17,
	0x66, 0xe6, 0xf4, 0xc2, 0xcc, 0x7c, 0xbe, 0x30, 0x33, 0xcf, 0x9f, 0x36, 0x89, 0x6c, 0xee, 0x79,
	0x2d, 0x2c, 0x2d, 0x1e, 0x06, 0x76, 0xd2, 0x4e, 0x62, 0x97, 0xda, 0x01, 0xaf, 0x08, 0xea, 0x86,
	0xb2, 0xc2, 0xb8, 0x8f, 0xed, 0x83, 0xf8, 0x6f, 0x43, 0x1e, 0xb6, 0xb1, 0x68, 0x16, 0xd4, 0xe3,
	0xfe, 0xe4, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0x9d, 0xa4, 0xd6, 0x53, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ActivateChain defines message for activating chain to enable cross-chain swaps.
	ActivateChain(ctx context.Context, in *MsgActivateChain, opts ...grpc.CallOption) (*MsgActivateChainResponse, error)
	// DeactivateChain defines message for deactivating chain to disable cross-chain swaps.
	DeactivateChain(ctx context.Context, in *MsgDeactivateChain, opts ...grpc.CallOption) (*MsgDeactivateChainResponse, error)
	// InitializeSwap defines message for initializing the cross-chain swap.
	InitializeSwap(ctx context.Context, in *MsgInitializeSwap, opts ...grpc.CallOption) (*MsgInitializeSwapResponse, error)
	// RedeemSwap defines message for redeeming the cross-chain swap initialized before in sorce chain.
	RedeemSwap(ctx context.Context, in *MsgRedeemSwap, opts ...grpc.CallOption) (*MsgRedeemSwapResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ActivateChain(ctx context.Context, in *MsgActivateChain, opts ...grpc.CallOption) (*MsgActivateChainResponse, error) {
	out := new(MsgActivateChainResponse)
	err := c.cc.Invoke(ctx, "/decimal.swap.v1.Msg/ActivateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateChain(ctx context.Context, in *MsgDeactivateChain, opts ...grpc.CallOption) (*MsgDeactivateChainResponse, error) {
	out := new(MsgDeactivateChainResponse)
	err := c.cc.Invoke(ctx, "/decimal.swap.v1.Msg/DeactivateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitializeSwap(ctx context.Context, in *MsgInitializeSwap, opts ...grpc.CallOption) (*MsgInitializeSwapResponse, error) {
	out := new(MsgInitializeSwapResponse)
	err := c.cc.Invoke(ctx, "/decimal.swap.v1.Msg/InitializeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemSwap(ctx context.Context, in *MsgRedeemSwap, opts ...grpc.CallOption) (*MsgRedeemSwapResponse, error) {
	out := new(MsgRedeemSwapResponse)
	err := c.cc.Invoke(ctx, "/decimal.swap.v1.Msg/RedeemSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ActivateChain defines message for activating chain to enable cross-chain swaps.
	ActivateChain(context.Context, *MsgActivateChain) (*MsgActivateChainResponse, error)
	// DeactivateChain defines message for deactivating chain to disable cross-chain swaps.
	DeactivateChain(context.Context, *MsgDeactivateChain) (*MsgDeactivateChainResponse, error)
	// InitializeSwap defines message for initializing the cross-chain swap.
	InitializeSwap(context.Context, *MsgInitializeSwap) (*MsgInitializeSwapResponse, error)
	// RedeemSwap defines message for redeeming the cross-chain swap initialized before in sorce chain.
	RedeemSwap(context.Context, *MsgRedeemSwap) (*MsgRedeemSwapResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ActivateChain(ctx context.Context, req *MsgActivateChain) (*MsgActivateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateChain not implemented")
}
func (*UnimplementedMsgServer) DeactivateChain(ctx context.Context, req *MsgDeactivateChain) (*MsgDeactivateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateChain not implemented")
}
func (*UnimplementedMsgServer) InitializeSwap(ctx context.Context, req *MsgInitializeSwap) (*MsgInitializeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeSwap not implemented")
}
func (*UnimplementedMsgServer) RedeemSwap(ctx context.Context, req *MsgRedeemSwap) (*MsgRedeemSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemSwap not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ActivateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivateChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ActivateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.swap.v1.Msg/ActivateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ActivateChain(ctx, req.(*MsgActivateChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.swap.v1.Msg/DeactivateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateChain(ctx, req.(*MsgDeactivateChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitializeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitializeSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitializeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.swap.v1.Msg/InitializeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitializeSwap(ctx, req.(*MsgInitializeSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.swap.v1.Msg/RedeemSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemSwap(ctx, req.(*MsgRedeemSwap))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "decimal.swap.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateChain",
			Handler:    _Msg_ActivateChain_Handler,
		},
		{
			MethodName: "DeactivateChain",
			Handler:    _Msg_DeactivateChain_Handler,
		},
		{
			MethodName: "InitializeSwap",
			Handler:    _Msg_InitializeSwap_Handler,
		},
		{
			MethodName: "RedeemSwap",
			Handler:    _Msg_RedeemSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decimal/swap/v1/tx.proto",
}

func (m *MsgActivateChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitializeSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitializeSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitializeSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChain))
		i--
		dAtA[i] = 0x38
	}
	if m.FromChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromChain))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TransactionNumber) > 0 {
		i -= len(m.TransactionNumber)
		copy(dAtA[i:], m.TransactionNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactionNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitializeSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitializeSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitializeSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRedeemSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintTx(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintTx(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x52
	}
	if m.V != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x48
	}
	if m.DestChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChain))
		i--
		dAtA[i] = 0x40
	}
	if m.FromChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromChain))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TransactionNumber) > 0 {
		i -= len(m.TransactionNumber)
		copy(dAtA[i:], m.TransactionNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactionNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgActivateChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovTx(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeactivateChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovTx(uint64(m.ID))
	}
	return n
}

func (m *MsgDeactivateChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitializeSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactionNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FromChain != 0 {
		n += 1 + sovTx(uint64(m.FromChain))
	}
	if m.DestChain != 0 {
		n += 1 + sovTx(uint64(m.DestChain))
	}
	return n
}

func (m *MsgInitializeSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRedeemSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactionNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FromChain != 0 {
		n += 1 + sovTx(uint64(m.FromChain))
	}
	if m.DestChain != 0 {
		n += 1 + sovTx(uint64(m.DestChain))
	}
	if m.V != 0 {
		n += 1 + sovTx(uint64(m.V))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedeemSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgActivateChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitializeSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitializeSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitializeSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			m.FromChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			m.DestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitializeSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitializeSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitializeSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			m.FromChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			m.DestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
