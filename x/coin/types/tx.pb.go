// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/coin/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateCoin defines a SDK message for creating a new coin.
type MsgCreateCoin struct {
	Sender         string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom          string                `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Title          string                `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	CRR            uint32                `protobuf:"varint,4,opt,name=crr,proto3" json:"crr,omitempty"`
	InitialVolume  cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=initial_volume,json=initialVolume,proto3,customtype=cosmossdk.io/math.Int" json:"initial_volume"`
	InitialReserve cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=initial_reserve,json=initialReserve,proto3,customtype=cosmossdk.io/math.Int" json:"initial_reserve"`
	LimitVolume    cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=limit_volume,json=limitVolume,proto3,customtype=cosmossdk.io/math.Int" json:"limit_volume"`
	Identity       string                `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity,omitempty"`
	// min_volume defines optional minimal allowed supply for the coin.
	// NOTE: when value is zero it means that the coin does not support minimal supply limitations.
	MinVolume cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=min_volume,json=minVolume,proto3,customtype=cosmossdk.io/math.Int" json:"min_volume"`
}

func (m *MsgCreateCoin) Reset()         { *m = MsgCreateCoin{} }
func (m *MsgCreateCoin) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCoin) ProtoMessage()    {}
func (*MsgCreateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{0}
}
func (m *MsgCreateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCoin.Merge(m, src)
}
func (m *MsgCreateCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCoin proto.InternalMessageInfo

func (m *MsgCreateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateCoin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCreateCoin) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateCoin) GetCRR() uint32 {
	if m != nil {
		return m.CRR
	}
	return 0
}

func (m *MsgCreateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// MsgCreateCoinResponse defines the Msg/CreateCoin response type.
type MsgCreateCoinResponse struct {
}

func (m *MsgCreateCoinResponse) Reset()         { *m = MsgCreateCoinResponse{} }
func (m *MsgCreateCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCoinResponse) ProtoMessage()    {}
func (*MsgCreateCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{1}
}
func (m *MsgCreateCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCoinResponse.Merge(m, src)
}
func (m *MsgCreateCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCoinResponse proto.InternalMessageInfo

// MsgUpdateCoin defines a SDK message for modifying existing coin.
type MsgUpdateCoin struct {
	Sender      string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom       string                `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	LimitVolume cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=limit_volume,json=limitVolume,proto3,customtype=cosmossdk.io/math.Int" json:"limit_volume"`
	Identity    string                `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// min_volume defines optional minimal allowed supply for the coin.
	// NOTE: when value is zero it means that the coin does not support minimal supply limitations.
	MinVolume cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=min_volume,json=minVolume,proto3,customtype=cosmossdk.io/math.Int" json:"min_volume"`
}

func (m *MsgUpdateCoin) Reset()         { *m = MsgUpdateCoin{} }
func (m *MsgUpdateCoin) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCoin) ProtoMessage()    {}
func (*MsgUpdateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{2}
}
func (m *MsgUpdateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCoin.Merge(m, src)
}
func (m *MsgUpdateCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCoin proto.InternalMessageInfo

// MsgUpdateCoinResponse defines the Msg/UpdateCoin response type.
type MsgUpdateCoinResponse struct {
}

func (m *MsgUpdateCoinResponse) Reset()         { *m = MsgUpdateCoinResponse{} }
func (m *MsgUpdateCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCoinResponse) ProtoMessage()    {}
func (*MsgUpdateCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{3}
}
func (m *MsgUpdateCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCoinResponse.Merge(m, src)
}
func (m *MsgUpdateCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCoinResponse proto.InternalMessageInfo

// MsgSendCoin defines a SDK message for transferring a coin.
type MsgSendCoin struct {
	Sender    string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient string     `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Coin      types.Coin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgSendCoin) Reset()         { *m = MsgSendCoin{} }
func (m *MsgSendCoin) String() string { return proto.CompactTextString(m) }
func (*MsgSendCoin) ProtoMessage()    {}
func (*MsgSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{4}
}
func (m *MsgSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCoin.Merge(m, src)
}
func (m *MsgSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCoin proto.InternalMessageInfo

// MsgSendCoinResponse defines the Msg/SendCoin response type.
type MsgSendCoinResponse struct {
}

func (m *MsgSendCoinResponse) Reset()         { *m = MsgSendCoinResponse{} }
func (m *MsgSendCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendCoinResponse) ProtoMessage()    {}
func (*MsgSendCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{5}
}
func (m *MsgSendCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCoinResponse.Merge(m, src)
}
func (m *MsgSendCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCoinResponse proto.InternalMessageInfo

// MultiSendEntry defines a single entry of MsgMultiSendCoin message.
type MultiSendEntry struct {
	Recipient string     `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Coin      types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
}

func (m *MultiSendEntry) Reset()         { *m = MultiSendEntry{} }
func (m *MultiSendEntry) String() string { return proto.CompactTextString(m) }
func (*MultiSendEntry) ProtoMessage()    {}
func (*MultiSendEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{6}
}
func (m *MultiSendEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiSendEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiSendEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiSendEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSendEntry.Merge(m, src)
}
func (m *MultiSendEntry) XXX_Size() int {
	return m.Size()
}
func (m *MultiSendEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSendEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSendEntry proto.InternalMessageInfo

// MsgMultiSendCoin defines a SDK message for multiple transferring coins as a batch.
type MsgMultiSendCoin struct {
	Sender string           `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Sends  []MultiSendEntry `protobuf:"bytes,2,rep,name=sends,proto3" json:"sends"`
}

func (m *MsgMultiSendCoin) Reset()         { *m = MsgMultiSendCoin{} }
func (m *MsgMultiSendCoin) String() string { return proto.CompactTextString(m) }
func (*MsgMultiSendCoin) ProtoMessage()    {}
func (*MsgMultiSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{7}
}
func (m *MsgMultiSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiSendCoin.Merge(m, src)
}
func (m *MsgMultiSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiSendCoin proto.InternalMessageInfo

// MsgMultiSendCoinResponse defines the Msg/MultiSendCoin response type.
type MsgMultiSendCoinResponse struct {
}

func (m *MsgMultiSendCoinResponse) Reset()         { *m = MsgMultiSendCoinResponse{} }
func (m *MsgMultiSendCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMultiSendCoinResponse) ProtoMessage()    {}
func (*MsgMultiSendCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{8}
}
func (m *MsgMultiSendCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiSendCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiSendCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiSendCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiSendCoinResponse.Merge(m, src)
}
func (m *MsgMultiSendCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiSendCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiSendCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiSendCoinResponse proto.InternalMessageInfo

// MsgBuyCoin defines a SDK message for buying a coin.
type MsgBuyCoin struct {
	Sender        string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	CoinToBuy     types.Coin `protobuf:"bytes,2,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy"`
	MaxCoinToSell types.Coin `protobuf:"bytes,3,opt,name=max_coin_to_sell,json=maxCoinToSell,proto3" json:"max_coin_to_sell"`
}

func (m *MsgBuyCoin) Reset()         { *m = MsgBuyCoin{} }
func (m *MsgBuyCoin) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCoin) ProtoMessage()    {}
func (*MsgBuyCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{9}
}
func (m *MsgBuyCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCoin.Merge(m, src)
}
func (m *MsgBuyCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCoin proto.InternalMessageInfo

// MsgBuyCoinResponse defines the Msg/BuyCoin response type.
type MsgBuyCoinResponse struct {
}

func (m *MsgBuyCoinResponse) Reset()         { *m = MsgBuyCoinResponse{} }
func (m *MsgBuyCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCoinResponse) ProtoMessage()    {}
func (*MsgBuyCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{10}
}
func (m *MsgBuyCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCoinResponse.Merge(m, src)
}
func (m *MsgBuyCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCoinResponse proto.InternalMessageInfo

// MsgSellCoin defines a SDK message for selling a coin.
type MsgSellCoin struct {
	Sender       string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	CoinToSell   types.Coin `protobuf:"bytes,2,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell"`
	MinCoinToBuy types.Coin `protobuf:"bytes,3,opt,name=min_coin_to_buy,json=minCoinToBuy,proto3" json:"min_coin_to_buy"`
}

func (m *MsgSellCoin) Reset()         { *m = MsgSellCoin{} }
func (m *MsgSellCoin) String() string { return proto.CompactTextString(m) }
func (*MsgSellCoin) ProtoMessage()    {}
func (*MsgSellCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{11}
}
func (m *MsgSellCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellCoin.Merge(m, src)
}
func (m *MsgSellCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellCoin proto.InternalMessageInfo

// MsgSellCoinResponse defines the Msg/SellCoin response type.
type MsgSellCoinResponse struct {
}

func (m *MsgSellCoinResponse) Reset()         { *m = MsgSellCoinResponse{} }
func (m *MsgSellCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellCoinResponse) ProtoMessage()    {}
func (*MsgSellCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{12}
}
func (m *MsgSellCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellCoinResponse.Merge(m, src)
}
func (m *MsgSellCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellCoinResponse proto.InternalMessageInfo

// MsgSellAllCoin defines a SDK message for selling a coin completely (to sell all having amount of a coin)
type MsgSellAllCoin struct {
	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	CoinDenomToSell string     `protobuf:"bytes,2,opt,name=coin_denom_to_sell,json=coinDenomToSell,proto3" json:"coin_denom_to_sell,omitempty"`
	MinCoinToBuy    types.Coin `protobuf:"bytes,3,opt,name=min_coin_to_buy,json=minCoinToBuy,proto3" json:"min_coin_to_buy"`
}

func (m *MsgSellAllCoin) Reset()         { *m = MsgSellAllCoin{} }
func (m *MsgSellAllCoin) String() string { return proto.CompactTextString(m) }
func (*MsgSellAllCoin) ProtoMessage()    {}
func (*MsgSellAllCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{13}
}
func (m *MsgSellAllCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellAllCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellAllCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellAllCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellAllCoin.Merge(m, src)
}
func (m *MsgSellAllCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellAllCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellAllCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellAllCoin proto.InternalMessageInfo

// MsgSellAllCoinResponse defines the Msg/SellAllCoin response type.
type MsgSellAllCoinResponse struct {
}

func (m *MsgSellAllCoinResponse) Reset()         { *m = MsgSellAllCoinResponse{} }
func (m *MsgSellAllCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellAllCoinResponse) ProtoMessage()    {}
func (*MsgSellAllCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{14}
}
func (m *MsgSellAllCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellAllCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellAllCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellAllCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellAllCoinResponse.Merge(m, src)
}
func (m *MsgSellAllCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellAllCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellAllCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellAllCoinResponse proto.InternalMessageInfo

// MsgBurnCoin defines a SDK message for burning a coin.
type MsgBurnCoin struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Coin   types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgBurnCoin) Reset()         { *m = MsgBurnCoin{} }
func (m *MsgBurnCoin) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCoin) ProtoMessage()    {}
func (*MsgBurnCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{15}
}
func (m *MsgBurnCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCoin.Merge(m, src)
}
func (m *MsgBurnCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCoin proto.InternalMessageInfo

// MsgBurnCoinResponse defines the Msg/BurnCoin response type.
type MsgBurnCoinResponse struct {
}

func (m *MsgBurnCoinResponse) Reset()         { *m = MsgBurnCoinResponse{} }
func (m *MsgBurnCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCoinResponse) ProtoMessage()    {}
func (*MsgBurnCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{16}
}
func (m *MsgBurnCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCoinResponse.Merge(m, src)
}
func (m *MsgBurnCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCoinResponse proto.InternalMessageInfo

// MsgRedeemCheck defines a SDK message for redeeming a check.
type MsgRedeemCheck struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Check  string `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	Proof  string `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgRedeemCheck) Reset()         { *m = MsgRedeemCheck{} }
func (m *MsgRedeemCheck) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemCheck) ProtoMessage()    {}
func (*MsgRedeemCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{17}
}
func (m *MsgRedeemCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemCheck.Merge(m, src)
}
func (m *MsgRedeemCheck) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemCheck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemCheck proto.InternalMessageInfo

// MsgRedeemCheckResponse defines the Msg/RedeemCheck response type.
type MsgRedeemCheckResponse struct {
}

func (m *MsgRedeemCheckResponse) Reset()         { *m = MsgRedeemCheckResponse{} }
func (m *MsgRedeemCheckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemCheckResponse) ProtoMessage()    {}
func (*MsgRedeemCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{18}
}
func (m *MsgRedeemCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemCheckResponse.Merge(m, src)
}
func (m *MsgRedeemCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemCheckResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCoin)(nil), "decimal.coin.v1.MsgCreateCoin")
	proto.RegisterType((*MsgCreateCoinResponse)(nil), "decimal.coin.v1.MsgCreateCoinResponse")
	proto.RegisterType((*MsgUpdateCoin)(nil), "decimal.coin.v1.MsgUpdateCoin")
	proto.RegisterType((*MsgUpdateCoinResponse)(nil), "decimal.coin.v1.MsgUpdateCoinResponse")
	proto.RegisterType((*MsgSendCoin)(nil), "decimal.coin.v1.MsgSendCoin")
	proto.RegisterType((*MsgSendCoinResponse)(nil), "decimal.coin.v1.MsgSendCoinResponse")
	proto.RegisterType((*MultiSendEntry)(nil), "decimal.coin.v1.MultiSendEntry")
	proto.RegisterType((*MsgMultiSendCoin)(nil), "decimal.coin.v1.MsgMultiSendCoin")
	proto.RegisterType((*MsgMultiSendCoinResponse)(nil), "decimal.coin.v1.MsgMultiSendCoinResponse")
	proto.RegisterType((*MsgBuyCoin)(nil), "decimal.coin.v1.MsgBuyCoin")
	proto.RegisterType((*MsgBuyCoinResponse)(nil), "decimal.coin.v1.MsgBuyCoinResponse")
	proto.RegisterType((*MsgSellCoin)(nil), "decimal.coin.v1.MsgSellCoin")
	proto.RegisterType((*MsgSellCoinResponse)(nil), "decimal.coin.v1.MsgSellCoinResponse")
	proto.RegisterType((*MsgSellAllCoin)(nil), "decimal.coin.v1.MsgSellAllCoin")
	proto.RegisterType((*MsgSellAllCoinResponse)(nil), "decimal.coin.v1.MsgSellAllCoinResponse")
	proto.RegisterType((*MsgBurnCoin)(nil), "decimal.coin.v1.MsgBurnCoin")
	proto.RegisterType((*MsgBurnCoinResponse)(nil), "decimal.coin.v1.MsgBurnCoinResponse")
	proto.RegisterType((*MsgRedeemCheck)(nil), "decimal.coin.v1.MsgRedeemCheck")
	proto.RegisterType((*MsgRedeemCheckResponse)(nil), "decimal.coin.v1.MsgRedeemCheckResponse")
}

func init() { proto.RegisterFile("decimal/coin/v1/tx.proto", fileDescriptor_d51fdc6114423de8) }

var fileDescriptor_d51fdc6114423de8 = []byte{
	// 991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x9b, 0xfe, 0xca, 0x4b, 0xb3, 0x5d, 0x99, 0x96, 0xba, 0x61, 0x95, 0x94, 0x82, 0xa0,
	0xb0, 0xaa, 0x4d, 0xbb, 0x88, 0x03, 0x1c, 0x50, 0x13, 0x40, 0x2c, 0x28, 0x3d, 0xb8, 0x05, 0x24,
	0x24, 0x14, 0x39, 0xf6, 0xe0, 0x1d, 0xd5, 0x9e, 0x89, 0x3c, 0x93, 0xa8, 0xb9, 0x72, 0x01, 0x09,
	0x21, 0x71, 0x44, 0x9c, 0x7a, 0xe4, 0xc8, 0x61, 0xff, 0x05, 0xa4, 0x3d, 0x56, 0x7b, 0x42, 0x1c,
	0x2a, 0x94, 0x1e, 0xe0, 0x3f, 0xe0, 0x08, 0x1a, 0x8f, 0xed, 0xda, 0xad, 0x93, 0x34, 0x61, 0xb5,
	0xb7, 0xcc, 0x7c, 0xef, 0xbd, 0xf9, 0xbe, 0x6f, 0xf2, 0xde, 0x24, 0xa0, 0x39, 0xc8, 0xc6, 0xbe,
	0xe5, 0x19, 0x36, 0xc5, 0xc4, 0xe8, 0xef, 0x19, 0xfc, 0x54, 0xef, 0x06, 0x94, 0x53, 0x75, 0x35,
	0x42, 0x74, 0x81, 0xe8, 0xfd, 0xbd, 0xea, 0x9a, 0x4b, 0x5d, 0x1a, 0x62, 0x86, 0xf8, 0x24, 0xc3,
	0xaa, 0x9b, 0x36, 0x65, 0x3e, 0x65, 0x6d, 0x09, 0xc8, 0x45, 0x04, 0xd5, 0xe4, 0xca, 0xe8, 0x58,
	0x0c, 0x19, 0xfd, 0xbd, 0x0e, 0xe2, 0xd6, 0x5e, 0x78, 0x4e, 0x84, 0x6f, 0x44, 0xb8, 0xcf, 0x5c,
	0x71, 0xb2, 0xcf, 0x5c, 0x09, 0x6c, 0xff, 0x53, 0x84, 0x4a, 0x8b, 0xb9, 0xcd, 0x00, 0x59, 0x1c,
	0x35, 0x29, 0x26, 0xea, 0x5b, 0xb0, 0xc8, 0x10, 0x71, 0x50, 0xa0, 0x29, 0x5b, 0xca, 0x4e, 0xa9,
	0xa1, 0x3d, 0x7d, 0xbc, 0xbb, 0x16, 0x1d, 0x76, 0xe0, 0x38, 0x01, 0x62, 0xec, 0x88, 0x07, 0x98,
	0xb8, 0x66, 0x14, 0xa7, 0xae, 0xc1, 0x82, 0x83, 0x08, 0xf5, 0xb5, 0x39, 0x91, 0x60, 0xca, 0x85,
	0xd8, 0xe5, 0x98, 0x7b, 0x48, 0x2b, 0xca, 0xdd, 0x70, 0xa1, 0x6e, 0x42, 0xd1, 0x0e, 0x02, 0x6d,
	0x7e, 0x4b, 0xd9, 0xa9, 0x34, 0x96, 0x86, 0x17, 0xf5, 0x62, 0xd3, 0x34, 0x4d, 0xb1, 0xa7, 0x9a,
	0x70, 0x07, 0x13, 0xcc, 0xb1, 0xe5, 0xb5, 0xfb, 0xd4, 0xeb, 0xf9, 0x48, 0x5b, 0x08, 0x09, 0xdc,
	0x7f, 0x72, 0x51, 0x2f, 0xfc, 0x71, 0x51, 0x5f, 0x97, 0x24, 0x98, 0x73, 0xa2, 0x63, 0x6a, 0xf8,
	0x16, 0x7f, 0xa4, 0x3f, 0x24, 0xfc, 0xe9, 0xe3, 0x5d, 0x88, 0xd8, 0x3d, 0x24, 0xdc, 0xac, 0x44,
	0x25, 0x3e, 0x0f, 0x2b, 0xa8, 0xc7, 0xb0, 0x1a, 0xd7, 0x0c, 0x10, 0x43, 0x41, 0x1f, 0x69, 0x8b,
	0xd3, 0x17, 0x8d, 0x79, 0x99, 0xb2, 0x84, 0x7a, 0x08, 0x2b, 0x1e, 0xf6, 0x31, 0x8f, 0x79, 0x2e,
	0x4d, 0x5f, 0xb2, 0x1c, 0x16, 0x88, 0x58, 0x56, 0x61, 0x19, 0x3b, 0x88, 0x70, 0xcc, 0x07, 0xda,
	0x72, 0xe8, 0x56, 0xb2, 0x56, 0x3f, 0x01, 0xf0, 0x31, 0x89, 0x4f, 0x2a, 0x4d, 0x7f, 0x52, 0xc9,
	0xc7, 0x44, 0x9e, 0xf3, 0x6e, 0xf9, 0x9b, 0xbf, 0x7e, 0x7d, 0x33, 0xba, 0xb5, 0xed, 0x0d, 0x58,
	0xcf, 0x5c, 0xbc, 0x89, 0x58, 0x97, 0x12, 0x86, 0xb6, 0x7f, 0x99, 0x0b, 0xbf, 0x12, 0x9f, 0x75,
	0x9d, 0x67, 0xfd, 0x95, 0xb8, 0xee, 0x5b, 0xf1, 0x19, 0xfa, 0x36, 0x3f, 0xd6, 0xb7, 0x85, 0xff,
	0xe5, 0xdb, 0xc6, 0x77, 0x67, 0xf5, 0xc2, 0x4f, 0x67, 0x75, 0xe5, 0xef, 0xb3, 0x7a, 0xe1, 0xa6,
	0x87, 0x57, 0x4e, 0x25, 0x1e, 0xfe, 0xa6, 0x40, 0xb9, 0xc5, 0xdc, 0x23, 0x44, 0x9c, 0x19, 0x1d,
	0x7c, 0x07, 0x4a, 0x01, 0xb2, 0x71, 0x17, 0x23, 0xc2, 0xa5, 0x8b, 0x63, 0x92, 0xae, 0x42, 0xd5,
	0x07, 0x30, 0x2f, 0xfa, 0x3e, 0xf4, 0xb6, 0xbc, 0xbf, 0xa9, 0x47, 0xf1, 0x62, 0x30, 0xe8, 0xd1,
	0x60, 0xd0, 0x05, 0xa5, 0xc6, 0xbc, 0x30, 0xc3, 0x0c, 0x83, 0x47, 0x0b, 0x5c, 0x87, 0x17, 0x52,
	0x32, 0x12, 0x79, 0xdf, 0x2b, 0x70, 0xa7, 0xd5, 0xf3, 0x38, 0x16, 0xc8, 0x87, 0x84, 0x07, 0x83,
	0x2c, 0x5f, 0x65, 0x7a, 0xbe, 0x73, 0xd3, 0xf0, 0x5d, 0x49, 0xf3, 0xdd, 0xfe, 0x59, 0x81, 0xbb,
	0x2d, 0xe6, 0x26, 0x84, 0x66, 0x74, 0xfc, 0x3d, 0x58, 0x10, 0x9f, 0x98, 0x36, 0xb7, 0x55, 0xdc,
	0x29, 0xef, 0xd7, 0xf5, 0x6b, 0x53, 0x59, 0xcf, 0x2a, 0x8e, 0x08, 0xc9, 0x9c, 0xd1, 0x0e, 0x56,
	0x41, 0xbb, 0xce, 0x2d, 0xb1, 0x71, 0xa8, 0x00, 0xb4, 0x98, 0xdb, 0xe8, 0x0d, 0x66, 0xa4, 0xfc,
	0x3e, 0x94, 0x05, 0xb9, 0x36, 0xa7, 0xed, 0x4e, 0x6f, 0x70, 0x5b, 0x0f, 0x4b, 0x22, 0xe7, 0x98,
	0x36, 0x7a, 0x03, 0xf5, 0x63, 0xb8, 0xeb, 0x5b, 0xa7, 0xed, 0xb8, 0x08, 0x43, 0x9e, 0x77, 0xdb,
	0x6f, 0x4e, 0xc5, 0xb7, 0x4e, 0x9b, 0x61, 0xa1, 0x23, 0xe4, 0x79, 0xa3, 0x0d, 0x58, 0x03, 0xf5,
	0x4a, 0x63, 0x22, 0xfd, 0x32, 0x6e, 0x10, 0xcf, 0x9b, 0x51, 0xfb, 0x01, 0xac, 0x64, 0x68, 0xdf,
	0x52, 0x3c, 0xd8, 0x09, 0x67, 0xf5, 0x23, 0x58, 0x15, 0x33, 0x22, 0x6d, 0xe1, 0x2d, 0xc5, 0xaf,
	0xf8, 0x98, 0x34, 0x63, 0x17, 0x27, 0xb7, 0x8f, 0x14, 0x99, 0x88, 0x3f, 0x17, 0xed, 0x23, 0xf7,
	0x0f, 0x66, 0xd6, 0x7f, 0x1f, 0xd4, 0x90, 0x78, 0x38, 0x5a, 0x33, 0x2e, 0x94, 0xcc, 0x55, 0x81,
	0x7c, 0x20, 0x80, 0xe7, 0xa5, 0x54, 0x83, 0x17, 0xb3, 0x8a, 0x12, 0xb1, 0x3f, 0xc8, 0x9b, 0x6e,
	0xf4, 0x02, 0x32, 0xa3, 0xd2, 0x99, 0x46, 0xc4, 0x84, 0x3b, 0x89, 0xe9, 0x24, 0x34, 0xbf, 0x95,
	0x77, 0x62, 0x22, 0x07, 0x21, 0xbf, 0xf9, 0x08, 0xd9, 0x27, 0xb3, 0x3d, 0x7b, 0xb6, 0x48, 0x8d,
	0x9f, 0xbd, 0x70, 0x21, 0x76, 0xbb, 0x01, 0xa5, 0x5f, 0xc7, 0xbf, 0x84, 0xc2, 0xc5, 0x24, 0x2b,
	0x53, 0x44, 0x62, 0x8e, 0xfb, 0xff, 0x2e, 0x40, 0xb1, 0xc5, 0x5c, 0xf5, 0x18, 0x20, 0xf5, 0x83,
	0xad, 0x76, 0x73, 0x50, 0xa5, 0xdf, 0xf5, 0xea, 0x6b, 0xe3, 0xf1, 0xb8, 0xba, 0xa8, 0x9a, 0x7a,
	0xf3, 0x73, 0xab, 0x5e, 0xe1, 0xf9, 0x55, 0x6f, 0xbe, 0x84, 0xea, 0x21, 0x2c, 0x27, 0x33, 0xf9,
	0x5e, 0x5e, 0x4e, 0x8c, 0x56, 0x5f, 0x1d, 0x87, 0x26, 0xf5, 0xbe, 0x82, 0x4a, 0x76, 0xd0, 0xbf,
	0x9c, 0x97, 0x96, 0x09, 0xa9, 0xbe, 0x31, 0x31, 0x24, 0x29, 0xff, 0x29, 0x2c, 0xc5, 0xe3, 0xf8,
	0xa5, 0xbc, 0xac, 0x08, 0xac, 0xbe, 0x32, 0x06, 0xcc, 0x6a, 0x8f, 0x1a, 0x7c, 0x84, 0x76, 0x89,
	0x8e, 0xd2, 0x9e, 0x6d, 0x25, 0xf5, 0x0b, 0x28, 0xa7, 0x67, 0x46, 0x7d, 0x54, 0x52, 0x14, 0x50,
	0x7d, 0x7d, 0x42, 0x40, 0x9a, 0x68, 0xd2, 0x9f, 0xf7, 0xf2, 0x95, 0x49, 0x34, 0x9f, 0xe8, 0xf5,
	0x66, 0x12, 0x44, 0xd3, 0x8d, 0x94, 0x4b, 0x34, 0x15, 0x90, 0x4f, 0x34, 0xa7, 0x03, 0x1a, 0x87,
	0x4f, 0x86, 0x35, 0xe5, 0x7c, 0x58, 0x53, 0xfe, 0x1c, 0xd6, 0x94, 0x1f, 0x2f, 0x6b, 0x85, 0xf3,
	0xcb, 0x5a, 0xe1, 0xf7, 0xcb, 0x5a, 0xe1, 0xcb, 0xb7, 0x3b, 0x98, 0x77, 0x7a, 0xf6, 0x09, 0xe2,
	0x3a, 0x0d, 0x5c, 0x23, 0xaa, 0xc7, 0x91, 0xe5, 0x1b, 0x2e, 0xdd, 0x65, 0xbe, 0x15, 0xf0, 0x5d,
	0x42, 0x1d, 0x64, 0x9c, 0xca, 0xff, 0x5f, 0x7c, 0xd0, 0x45, 0xac, 0xb3, 0x18, 0xfe, 0x0b, 0x7a,
	0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0xff, 0xee, 0x76, 0x9c, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCoin defines message for creating a new coin.
	CreateCoin(ctx context.Context, in *MsgCreateCoin, opts ...grpc.CallOption) (*MsgCreateCoinResponse, error)
	// UpdateCoin defines message for modifying existing coin.
	UpdateCoin(ctx context.Context, in *MsgUpdateCoin, opts ...grpc.CallOption) (*MsgUpdateCoinResponse, error)
	// SendCoin defines message for transferring a coin.
	SendCoin(ctx context.Context, in *MsgSendCoin, opts ...grpc.CallOption) (*MsgSendCoinResponse, error)
	// MultiSendCoin defines message for multiple transferring coins as a batch.
	MultiSendCoin(ctx context.Context, in *MsgMultiSendCoin, opts ...grpc.CallOption) (*MsgMultiSendCoinResponse, error)
	// BuyCoin defines message for buying a coin.
	BuyCoin(ctx context.Context, in *MsgBuyCoin, opts ...grpc.CallOption) (*MsgBuyCoinResponse, error)
	// SellCoin defines message for selling a coin.
	SellCoin(ctx context.Context, in *MsgSellCoin, opts ...grpc.CallOption) (*MsgSellCoinResponse, error)
	// SellAllCoin defines message for selling a coin completely (to sell all having amount of a coin).
	SellAllCoin(ctx context.Context, in *MsgSellAllCoin, opts ...grpc.CallOption) (*MsgSellAllCoinResponse, error)
	// BurnCoin defines message for burning a coin.
	BurnCoin(ctx context.Context, in *MsgBurnCoin, opts ...grpc.CallOption) (*MsgBurnCoinResponse, error)
	// RedeemCheck defines message for redeeming checks.
	RedeemCheck(ctx context.Context, in *MsgRedeemCheck, opts ...grpc.CallOption) (*MsgRedeemCheckResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCoin(ctx context.Context, in *MsgCreateCoin, opts ...grpc.CallOption) (*MsgCreateCoinResponse, error) {
	out := new(MsgCreateCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/CreateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCoin(ctx context.Context, in *MsgUpdateCoin, opts ...grpc.CallOption) (*MsgUpdateCoinResponse, error) {
	out := new(MsgUpdateCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/UpdateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendCoin(ctx context.Context, in *MsgSendCoin, opts ...grpc.CallOption) (*MsgSendCoinResponse, error) {
	out := new(MsgSendCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/SendCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MultiSendCoin(ctx context.Context, in *MsgMultiSendCoin, opts ...grpc.CallOption) (*MsgMultiSendCoinResponse, error) {
	out := new(MsgMultiSendCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/MultiSendCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyCoin(ctx context.Context, in *MsgBuyCoin, opts ...grpc.CallOption) (*MsgBuyCoinResponse, error) {
	out := new(MsgBuyCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/BuyCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellCoin(ctx context.Context, in *MsgSellCoin, opts ...grpc.CallOption) (*MsgSellCoinResponse, error) {
	out := new(MsgSellCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/SellCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellAllCoin(ctx context.Context, in *MsgSellAllCoin, opts ...grpc.CallOption) (*MsgSellAllCoinResponse, error) {
	out := new(MsgSellAllCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/SellAllCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnCoin(ctx context.Context, in *MsgBurnCoin, opts ...grpc.CallOption) (*MsgBurnCoinResponse, error) {
	out := new(MsgBurnCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/BurnCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemCheck(ctx context.Context, in *MsgRedeemCheck, opts ...grpc.CallOption) (*MsgRedeemCheckResponse, error) {
	out := new(MsgRedeemCheckResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/RedeemCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCoin defines message for creating a new coin.
	CreateCoin(context.Context, *MsgCreateCoin) (*MsgCreateCoinResponse, error)
	// UpdateCoin defines message for modifying existing coin.
	UpdateCoin(context.Context, *MsgUpdateCoin) (*MsgUpdateCoinResponse, error)
	// SendCoin defines message for transferring a coin.
	SendCoin(context.Context, *MsgSendCoin) (*MsgSendCoinResponse, error)
	// MultiSendCoin defines message for multiple transferring coins as a batch.
	MultiSendCoin(context.Context, *MsgMultiSendCoin) (*MsgMultiSendCoinResponse, error)
	// BuyCoin defines message for buying a coin.
	BuyCoin(context.Context, *MsgBuyCoin) (*MsgBuyCoinResponse, error)
	// SellCoin defines message for selling a coin.
	SellCoin(context.Context, *MsgSellCoin) (*MsgSellCoinResponse, error)
	// SellAllCoin defines message for selling a coin completely (to sell all having amount of a coin).
	SellAllCoin(context.Context, *MsgSellAllCoin) (*MsgSellAllCoinResponse, error)
	// BurnCoin defines message for burning a coin.
	BurnCoin(context.Context, *MsgBurnCoin) (*MsgBurnCoinResponse, error)
	// RedeemCheck defines message for redeeming checks.
	RedeemCheck(context.Context, *MsgRedeemCheck) (*MsgRedeemCheckResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCoin(ctx context.Context, req *MsgCreateCoin) (*MsgCreateCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoin not implemented")
}
func (*UnimplementedMsgServer) UpdateCoin(ctx context.Context, req *MsgUpdateCoin) (*MsgUpdateCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoin not implemented")
}
func (*UnimplementedMsgServer) SendCoin(ctx context.Context, req *MsgSendCoin) (*MsgSendCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoin not implemented")
}
func (*UnimplementedMsgServer) MultiSendCoin(ctx context.Context, req *MsgMultiSendCoin) (*MsgMultiSendCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSendCoin not implemented")
}
func (*UnimplementedMsgServer) BuyCoin(ctx context.Context, req *MsgBuyCoin) (*MsgBuyCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCoin not implemented")
}
func (*UnimplementedMsgServer) SellCoin(ctx context.Context, req *MsgSellCoin) (*MsgSellCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellCoin not implemented")
}
func (*UnimplementedMsgServer) SellAllCoin(ctx context.Context, req *MsgSellAllCoin) (*MsgSellAllCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellAllCoin not implemented")
}
func (*UnimplementedMsgServer) BurnCoin(ctx context.Context, req *MsgBurnCoin) (*MsgBurnCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnCoin not implemented")
}
func (*UnimplementedMsgServer) RedeemCheck(ctx context.Context, req *MsgRedeemCheck) (*MsgRedeemCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemCheck not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/CreateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCoin(ctx, req.(*MsgCreateCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/UpdateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCoin(ctx, req.(*MsgUpdateCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/SendCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendCoin(ctx, req.(*MsgSendCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MultiSendCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMultiSendCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MultiSendCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/MultiSendCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MultiSendCoin(ctx, req.(*MsgMultiSendCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/BuyCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyCoin(ctx, req.(*MsgBuyCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/SellCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellCoin(ctx, req.(*MsgSellCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellAllCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellAllCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellAllCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/SellAllCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellAllCoin(ctx, req.(*MsgSellAllCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/BurnCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnCoin(ctx, req.(*MsgBurnCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/RedeemCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemCheck(ctx, req.(*MsgRedeemCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "decimal.coin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoin",
			Handler:    _Msg_CreateCoin_Handler,
		},
		{
			MethodName: "UpdateCoin",
			Handler:    _Msg_UpdateCoin_Handler,
		},
		{
			MethodName: "SendCoin",
			Handler:    _Msg_SendCoin_Handler,
		},
		{
			MethodName: "MultiSendCoin",
			Handler:    _Msg_MultiSendCoin_Handler,
		},
		{
			MethodName: "BuyCoin",
			Handler:    _Msg_BuyCoin_Handler,
		},
		{
			MethodName: "SellCoin",
			Handler:    _Msg_SellCoin_Handler,
		},
		{
			MethodName: "SellAllCoin",
			Handler:    _Msg_SellAllCoin_Handler,
		},
		{
			MethodName: "BurnCoin",
			Handler:    _Msg_BurnCoin_Handler,
		},
		{
			MethodName: "RedeemCheck",
			Handler:    _Msg_RedeemCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decimal/coin/v1/tx.proto",
}

func (m *MsgCreateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinVolume.Size()
		i -= size
		if _, err := m.MinVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.LimitVolume.Size()
		i -= size
		if _, err := m.LimitVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.InitialReserve.Size()
		i -= size
		if _, err := m.InitialReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InitialVolume.Size()
		i -= size
		if _, err := m.InitialVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.CRR != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CRR))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinVolume.Size()
		i -= size
		if _, err := m.MinVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.LimitVolume.Size()
		i -= size
		if _, err := m.LimitVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MultiSendEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSendEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiSendEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sends) > 0 {
		for iNdEx := len(m.Sends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiSendCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiSendCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiSendCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxCoinToSell.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CoinToBuy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSellCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinCoinToBuy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CoinToSell.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSellAllCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellAllCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellAllCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinCoinToBuy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CoinDenomToSell) > 0 {
		i -= len(m.CoinDenomToSell)
		copy(dAtA[i:], m.CoinDenomToSell)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CoinDenomToSell)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellAllCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellAllCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellAllCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRedeemCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Check) > 0 {
		i -= len(m.Check)
		copy(dAtA[i:], m.Check)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Check)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CRR != 0 {
		n += 1 + sovTx(uint64(m.CRR))
	}
	l = m.InitialVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.InitialReserve.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.LimitVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.LimitVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSendCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MultiSendEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMultiSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Sends) > 0 {
		for _, e := range m.Sends {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMultiSendCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CoinToBuy.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxCoinToSell.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBuyCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSellCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CoinToSell.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinCoinToBuy.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSellCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSellAllCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CoinDenomToSell)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinCoinToBuy.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSellAllCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRedeemCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Check)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedeemCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRR", wireType)
			}
			m.CRR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRR |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiSendEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSendEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSendEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sends = append(m.Sends, MultiSendEntry{})
			if err := m.Sends[len(m.Sends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiSendCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiSendCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiSendCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToBuy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinToBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCoinToSell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxCoinToSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToSell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinToSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCoinToBuy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCoinToBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellAllCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellAllCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellAllCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinDenomToSell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinDenomToSell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCoinToBuy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCoinToBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellAllCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellAllCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellAllCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Check = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
