// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/coin/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCreateCoin struct {
	Sender               string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	Title                string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Symbol               string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol"`
	CRR                  uint64 `protobuf:"varint,4,opt,name=crr,proto3" json:"constant_reserve_ratio"`
	Volume               string `protobuf:"bytes,5,opt,name=volume,proto3" json:"volume"`
	Reserve              string `protobuf:"bytes,6,opt,name=reserve,proto3" json:"reserve"`
	LimitVolume          string `protobuf:"bytes,7,opt,name=limit_volume,json=limitVolume,proto3" json:"limit_volume"`
	Identity             string `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity"`
	CommissionCreateCoin string `protobuf:"bytes,9,opt,name=commission_create_coin,json=commissionCreateCoin,proto3" json:"commission_create_coin"`
}

func (m *EventCreateCoin) Reset()         { *m = EventCreateCoin{} }
func (m *EventCreateCoin) String() string { return proto.CompactTextString(m) }
func (*EventCreateCoin) ProtoMessage()    {}
func (*EventCreateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{0}
}
func (m *EventCreateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateCoin.Merge(m, src)
}
func (m *EventCreateCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateCoin proto.InternalMessageInfo

func (m *EventCreateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventCreateCoin) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventCreateCoin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventCreateCoin) GetCRR() uint64 {
	if m != nil {
		return m.CRR
	}
	return 0
}

func (m *EventCreateCoin) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *EventCreateCoin) GetReserve() string {
	if m != nil {
		return m.Reserve
	}
	return ""
}

func (m *EventCreateCoin) GetLimitVolume() string {
	if m != nil {
		return m.LimitVolume
	}
	return ""
}

func (m *EventCreateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *EventCreateCoin) GetCommissionCreateCoin() string {
	if m != nil {
		return m.CommissionCreateCoin
	}
	return ""
}

type EventUpdateCoin struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	Symbol      string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	LimitVolume string `protobuf:"bytes,3,opt,name=limit_volume,json=limitVolume,proto3" json:"limit_volume"`
	Identity    string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity"`
}

func (m *EventUpdateCoin) Reset()         { *m = EventUpdateCoin{} }
func (m *EventUpdateCoin) String() string { return proto.CompactTextString(m) }
func (*EventUpdateCoin) ProtoMessage()    {}
func (*EventUpdateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{1}
}
func (m *EventUpdateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateCoin.Merge(m, src)
}
func (m *EventUpdateCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateCoin proto.InternalMessageInfo

func (m *EventUpdateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventUpdateCoin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventUpdateCoin) GetLimitVolume() string {
	if m != nil {
		return m.LimitVolume
	}
	return ""
}

func (m *EventUpdateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type EventBuyCoin struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	ToBuyCoin        string `protobuf:"bytes,2,opt,name=to_buy_coin,json=toBuyCoin,proto3" json:"to_buy_coin"`
	ToSellCoin       string `protobuf:"bytes,3,opt,name=to_sell_coin,json=toSellCoin,proto3" json:"to_sell_coin"`
	ToSellInBaseCoin string `protobuf:"bytes,4,opt,name=to_sell_in_base_coin,json=toSellInBaseCoin,proto3" json:"to_sell_in_base_coin"`
}

func (m *EventBuyCoin) Reset()         { *m = EventBuyCoin{} }
func (m *EventBuyCoin) String() string { return proto.CompactTextString(m) }
func (*EventBuyCoin) ProtoMessage()    {}
func (*EventBuyCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{2}
}
func (m *EventBuyCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBuyCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBuyCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBuyCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBuyCoin.Merge(m, src)
}
func (m *EventBuyCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventBuyCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBuyCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventBuyCoin proto.InternalMessageInfo

func (m *EventBuyCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventBuyCoin) GetToBuyCoin() string {
	if m != nil {
		return m.ToBuyCoin
	}
	return ""
}

func (m *EventBuyCoin) GetToSellCoin() string {
	if m != nil {
		return m.ToSellCoin
	}
	return ""
}

func (m *EventBuyCoin) GetToSellInBaseCoin() string {
	if m != nil {
		return m.ToSellInBaseCoin
	}
	return ""
}

type EventSellCoin struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	ToSellCoin       string `protobuf:"bytes,2,opt,name=to_sell_coin,json=toSellCoin,proto3" json:"to_sell_coin"`
	ToBuyCoin        string `protobuf:"bytes,3,opt,name=to_buy_coin,json=toBuyCoin,proto3" json:"to_buy_coin"`
	ToSellInBaseCoin string `protobuf:"bytes,4,opt,name=to_sell_in_base_coin,json=toSellInBaseCoin,proto3" json:"to_sell_in_base_coin"`
}

func (m *EventSellCoin) Reset()         { *m = EventSellCoin{} }
func (m *EventSellCoin) String() string { return proto.CompactTextString(m) }
func (*EventSellCoin) ProtoMessage()    {}
func (*EventSellCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{3}
}
func (m *EventSellCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSellCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSellCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSellCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSellCoin.Merge(m, src)
}
func (m *EventSellCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventSellCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSellCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventSellCoin proto.InternalMessageInfo

func (m *EventSellCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSellCoin) GetToSellCoin() string {
	if m != nil {
		return m.ToSellCoin
	}
	return ""
}

func (m *EventSellCoin) GetToBuyCoin() string {
	if m != nil {
		return m.ToBuyCoin
	}
	return ""
}

func (m *EventSellCoin) GetToSellInBaseCoin() string {
	if m != nil {
		return m.ToSellInBaseCoin
	}
	return ""
}

type EventSendCoin struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver"`
	Coin     string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *EventSendCoin) Reset()         { *m = EventSendCoin{} }
func (m *EventSendCoin) String() string { return proto.CompactTextString(m) }
func (*EventSendCoin) ProtoMessage()    {}
func (*EventSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{4}
}
func (m *EventSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendCoin.Merge(m, src)
}
func (m *EventSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendCoin proto.InternalMessageInfo

func (m *EventSendCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSendCoin) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSendCoin) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

type EventMultiSendCoin struct {
	Sender    string               `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	Receivers []*MultiSendReceiver `protobuf:"bytes,2,rep,name=receivers,proto3" json:"receivers"`
}

func (m *EventMultiSendCoin) Reset()         { *m = EventMultiSendCoin{} }
func (m *EventMultiSendCoin) String() string { return proto.CompactTextString(m) }
func (*EventMultiSendCoin) ProtoMessage()    {}
func (*EventMultiSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{5}
}
func (m *EventMultiSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMultiSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMultiSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMultiSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMultiSendCoin.Merge(m, src)
}
func (m *EventMultiSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventMultiSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMultiSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventMultiSendCoin proto.InternalMessageInfo

func (m *EventMultiSendCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventMultiSendCoin) GetReceivers() []*MultiSendReceiver {
	if m != nil {
		return m.Receivers
	}
	return nil
}

type EventCheckRedeem struct {
	Sender                string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	Issuer                string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer"`
	Coin                  string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
	Nonce                 string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce"`
	DueBlock              string `protobuf:"bytes,5,opt,name=due_block,json=dueBlock,proto3" json:"due_block"`
	CommissionRedeemCheck string `protobuf:"bytes,6,opt,name=commission_redeem_check,json=commissionRedeemCheck,proto3" json:"commission_redeem_check"`
}

func (m *EventCheckRedeem) Reset()         { *m = EventCheckRedeem{} }
func (m *EventCheckRedeem) String() string { return proto.CompactTextString(m) }
func (*EventCheckRedeem) ProtoMessage()    {}
func (*EventCheckRedeem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{6}
}
func (m *EventCheckRedeem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCheckRedeem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCheckRedeem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCheckRedeem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCheckRedeem.Merge(m, src)
}
func (m *EventCheckRedeem) XXX_Size() int {
	return m.Size()
}
func (m *EventCheckRedeem) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCheckRedeem.DiscardUnknown(m)
}

var xxx_messageInfo_EventCheckRedeem proto.InternalMessageInfo

func (m *EventCheckRedeem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventCheckRedeem) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *EventCheckRedeem) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func (m *EventCheckRedeem) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventCheckRedeem) GetDueBlock() string {
	if m != nil {
		return m.DueBlock
	}
	return ""
}

func (m *EventCheckRedeem) GetCommissionRedeemCheck() string {
	if m != nil {
		return m.CommissionRedeemCheck
	}
	return ""
}

type EventReturnLegacyBalance struct {
	Sender        string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender"`
	Receiver      string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver"`
	LegacyAddress string `protobuf:"bytes,3,opt,name=legacy_address,json=legacyAddress,proto3" json:"legacy_address"`
	CoinsToReturn string `protobuf:"bytes,4,opt,name=coins_to_return,json=coinsToReturn,proto3" json:"coins_to_return"`
}

func (m *EventReturnLegacyBalance) Reset()         { *m = EventReturnLegacyBalance{} }
func (m *EventReturnLegacyBalance) String() string { return proto.CompactTextString(m) }
func (*EventReturnLegacyBalance) ProtoMessage()    {}
func (*EventReturnLegacyBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{7}
}
func (m *EventReturnLegacyBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReturnLegacyBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReturnLegacyBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReturnLegacyBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReturnLegacyBalance.Merge(m, src)
}
func (m *EventReturnLegacyBalance) XXX_Size() int {
	return m.Size()
}
func (m *EventReturnLegacyBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReturnLegacyBalance.DiscardUnknown(m)
}

var xxx_messageInfo_EventReturnLegacyBalance proto.InternalMessageInfo

func (m *EventReturnLegacyBalance) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventReturnLegacyBalance) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventReturnLegacyBalance) GetLegacyAddress() string {
	if m != nil {
		return m.LegacyAddress
	}
	return ""
}

func (m *EventReturnLegacyBalance) GetCoinsToReturn() string {
	if m != nil {
		return m.CoinsToReturn
	}
	return ""
}

type MultiSendReceiver struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver"`
	Coin     string `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
}

func (m *MultiSendReceiver) Reset()         { *m = MultiSendReceiver{} }
func (m *MultiSendReceiver) String() string { return proto.CompactTextString(m) }
func (*MultiSendReceiver) ProtoMessage()    {}
func (*MultiSendReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{8}
}
func (m *MultiSendReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiSendReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiSendReceiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiSendReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSendReceiver.Merge(m, src)
}
func (m *MultiSendReceiver) XXX_Size() int {
	return m.Size()
}
func (m *MultiSendReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSendReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSendReceiver proto.InternalMessageInfo

func (m *MultiSendReceiver) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MultiSendReceiver) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateCoin)(nil), "decimal.coin.v1.EventCreateCoin")
	proto.RegisterType((*EventUpdateCoin)(nil), "decimal.coin.v1.EventUpdateCoin")
	proto.RegisterType((*EventBuyCoin)(nil), "decimal.coin.v1.EventBuyCoin")
	proto.RegisterType((*EventSellCoin)(nil), "decimal.coin.v1.EventSellCoin")
	proto.RegisterType((*EventSendCoin)(nil), "decimal.coin.v1.EventSendCoin")
	proto.RegisterType((*EventMultiSendCoin)(nil), "decimal.coin.v1.EventMultiSendCoin")
	proto.RegisterType((*EventCheckRedeem)(nil), "decimal.coin.v1.EventCheckRedeem")
	proto.RegisterType((*EventReturnLegacyBalance)(nil), "decimal.coin.v1.EventReturnLegacyBalance")
	proto.RegisterType((*MultiSendReceiver)(nil), "decimal.coin.v1.MultiSendReceiver")
}

func init() { proto.RegisterFile("decimal/coin/v1/events.proto", fileDescriptor_ca1c8461385eafed) }

var fileDescriptor_ca1c8461385eafed = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0xd9, 0x96, 0x56, 0x52, 0xe5, 0xb2, 0xae, 0x4b, 0xb8, 0x86, 0xe8, 0x12, 0x28,
	0x20, 0x14, 0xb0, 0x08, 0xdb, 0xbd, 0x14, 0x3d, 0x95, 0x46, 0x81, 0x16, 0xe8, 0x1f, 0xd6, 0x6d,
	0x0f, 0xed, 0x81, 0xa0, 0xc8, 0x81, 0xb2, 0x30, 0xc9, 0x35, 0x76, 0x97, 0x42, 0x84, 0x3c, 0x41,
	0x6e, 0x39, 0xe7, 0x15, 0xf2, 0x02, 0x79, 0x84, 0x1c, 0x7d, 0xcc, 0x89, 0x70, 0xe4, 0x1b, 0x9f,
	0x22, 0xe0, 0xee, 0x8a, 0x92, 0x15, 0xc7, 0x91, 0x01, 0x5f, 0xbc, 0xb3, 0xdf, 0xfc, 0x70, 0xbe,
	0x6f, 0xd6, 0x63, 0xa3, 0x83, 0x08, 0x42, 0x92, 0x04, 0xb1, 0x1b, 0x52, 0x92, 0xba, 0x93, 0x63,
	0x17, 0x26, 0x90, 0x0a, 0x3e, 0xbc, 0x64, 0x54, 0x50, 0xb3, 0xa7, 0xbd, 0xc3, 0xd2, 0x3b, 0x9c,
	0x1c, 0xef, 0xef, 0x8e, 0xe9, 0x98, 0x4a, 0x9f, 0x5b, 0x5a, 0x2a, 0xcc, 0x79, 0x55, 0x47, 0xbd,
	0x9f, 0xcb, 0xbc, 0x33, 0x06, 0x81, 0x80, 0x33, 0x4a, 0x52, 0xd3, 0x41, 0x5b, 0x1c, 0xd2, 0x08,
	0x98, 0x65, 0x1c, 0x1a, 0x83, 0x96, 0x87, 0x8a, 0xdc, 0xd6, 0x08, 0xd6, 0xa7, 0x69, 0xa3, 0x4d,
	0x41, 0x44, 0x0c, 0x56, 0x4d, 0x86, 0xb4, 0x8a, 0xdc, 0x56, 0x00, 0x56, 0x87, 0x2c, 0x32, 0x4d,
	0x46, 0x34, 0xb6, 0xea, 0x4b, 0x45, 0x24, 0x82, 0xf5, 0x69, 0x9e, 0xa2, 0x7a, 0xc8, 0x98, 0xd5,
	0x38, 0x34, 0x06, 0x0d, 0xef, 0x9b, 0x59, 0x6e, 0xd7, 0xcf, 0x30, 0x2e, 0x72, 0x7b, 0x2f, 0xa4,
	0x29, 0x17, 0x41, 0x2a, 0x7c, 0x06, 0x1c, 0xd8, 0x04, 0x7c, 0x16, 0x08, 0x42, 0x71, 0x19, 0x5d,
	0x16, 0x9e, 0xd0, 0x38, 0x4b, 0xc0, 0xda, 0x5c, 0x14, 0x56, 0x08, 0xd6, 0xa7, 0xf9, 0x2d, 0xda,
	0xd6, 0x99, 0xd6, 0x96, 0x0c, 0x6a, 0x17, 0xb9, 0x3d, 0x87, 0xf0, 0xdc, 0x30, 0x4f, 0x51, 0x27,
	0x26, 0x09, 0x11, 0xbe, 0x2e, 0xb8, 0x2d, 0x63, 0x77, 0x8a, 0xdc, 0xbe, 0x85, 0xe3, 0xb6, 0xbc,
	0xfd, 0xab, 0x6a, 0x0f, 0x50, 0x93, 0x44, 0x90, 0x0a, 0x22, 0xa6, 0x56, 0x53, 0x26, 0x74, 0x8a,
	0xdc, 0xae, 0x30, 0x5c, 0x59, 0xe6, 0x5f, 0x68, 0x2f, 0xa4, 0x49, 0x42, 0x38, 0x27, 0x34, 0xf5,
	0x43, 0x29, 0xb0, 0x5f, 0x8e, 0xc3, 0x6a, 0xc9, 0xbc, 0x7d, 0x45, 0xf5, 0xae, 0x08, 0xbc, 0xbb,
	0xc0, 0x17, 0x93, 0x71, 0x5e, 0x1b, 0x7a, 0x5a, 0xff, 0x5c, 0x46, 0x0f, 0x99, 0xd6, 0x62, 0x18,
	0xb5, 0x7b, 0x86, 0x71, 0x5b, 0x8c, 0xfa, 0x43, 0xc5, 0x68, 0xdc, 0x27, 0x86, 0xf3, 0xce, 0x40,
	0x1d, 0xd9, 0xba, 0x97, 0x4d, 0xd7, 0xee, 0xdb, 0x45, 0x6d, 0x41, 0xfd, 0x51, 0x36, 0x55, 0xb2,
	0xa9, 0xe6, 0x7b, 0x45, 0x6e, 0x2f, 0xc3, 0xb8, 0x25, 0xe8, 0xbc, 0xe8, 0x09, 0xea, 0x08, 0xea,
	0x73, 0x88, 0x63, 0x95, 0xb1, 0x44, 0x62, 0x19, 0xc7, 0x48, 0xd0, 0x73, 0x88, 0x63, 0x99, 0xf3,
	0x0b, 0xda, 0x9d, 0xfb, 0x48, 0xea, 0x8f, 0x02, 0xae, 0x87, 0xa4, 0xf8, 0x58, 0x45, 0x6e, 0xdf,
	0xe9, 0xc7, 0x3b, 0xaa, 0xc6, 0xaf, 0xa9, 0x17, 0x70, 0x35, 0x9e, 0x99, 0x81, 0xba, 0x92, 0x63,
	0x55, 0x7b, 0x1d, 0x92, 0xab, 0x3d, 0xd7, 0xd6, 0xe8, 0x79, 0x45, 0x98, 0xfa, 0x27, 0x85, 0x79,
	0x3c, 0x92, 0xcf, 0x2a, 0x8e, 0x69, 0xb4, 0x36, 0xc7, 0x01, 0x6a, 0x32, 0x08, 0x81, 0x4c, 0x80,
	0x69, 0x7e, 0xf2, 0x9d, 0xcc, 0x31, 0x5c, 0x59, 0xe6, 0x01, 0x6a, 0x2c, 0x51, 0x6a, 0x16, 0xb9,
	0x2d, 0xef, 0x58, 0xfe, 0x74, 0x9e, 0x1b, 0xc8, 0x94, 0x5f, 0xff, 0x3d, 0x8b, 0x05, 0x79, 0x50,
	0x0b, 0x7f, 0xa2, 0xd6, 0xfc, 0x23, 0xdc, 0xaa, 0x1d, 0xd6, 0x07, 0xed, 0x13, 0x67, 0xb8, 0xb2,
	0x24, 0x87, 0x55, 0x59, 0xac, 0x43, 0xbd, 0x6e, 0x91, 0xdb, 0x8b, 0x44, 0xbc, 0x30, 0x9d, 0x97,
	0x35, 0xb4, 0xa3, 0x56, 0xe7, 0x13, 0x08, 0x2f, 0x30, 0x44, 0x00, 0xc9, 0xba, 0xbf, 0x8d, 0x84,
	0xf3, 0xac, 0x92, 0x42, 0xc6, 0x28, 0x04, 0xeb, 0xf3, 0x7e, 0x19, 0xca, 0xed, 0x9b, 0xd2, 0x34,
	0x04, 0x3d, 0x3e, 0xb9, 0x7d, 0x25, 0x80, 0xd5, 0x61, 0x7e, 0x87, 0x5a, 0x51, 0x06, 0xfe, 0x28,
	0xa6, 0xe1, 0x85, 0xde, 0x93, 0x92, 0x48, 0x05, 0xe2, 0x66, 0x94, 0x81, 0x57, 0x5a, 0xe6, 0x39,
	0xfa, 0x6a, 0x69, 0x09, 0x31, 0xc9, 0xc3, 0x0f, 0x4b, 0x4e, 0x7a, 0x79, 0x7e, 0x5d, 0xe4, 0xf6,
	0xc7, 0x42, 0xf0, 0x97, 0x0b, 0x87, 0x92, 0x40, 0xaa, 0xe1, 0x5c, 0x1b, 0xc8, 0x92, 0xe2, 0x60,
	0x10, 0x19, 0x4b, 0x7f, 0x83, 0x71, 0x10, 0x4e, 0xbd, 0x20, 0x0e, 0xca, 0xee, 0x1e, 0xf7, 0xc5,
	0xfc, 0x80, 0x3e, 0x8b, 0x65, 0x79, 0x3f, 0x88, 0x22, 0x06, 0x9c, 0x6b, 0xd1, 0xcc, 0x22, 0xb7,
	0x57, 0x3c, 0xb8, 0xab, 0xee, 0x3f, 0xa9, 0xab, 0xf9, 0x23, 0xea, 0x95, 0x7a, 0x72, 0x5f, 0x50,
	0x9f, 0xc9, 0x46, 0xb5, 0xa2, 0x5f, 0x14, 0xb9, 0xbd, 0xea, 0xc2, 0x5d, 0x09, 0xfc, 0x4d, 0x15,
	0x25, 0xe7, 0x7f, 0xf4, 0xf9, 0x07, 0xcf, 0xe5, 0x56, 0xdb, 0xc6, 0x5a, 0x0f, 0xbd, 0x76, 0xd7,
	0x84, 0xbd, 0x3f, 0xde, 0xcc, 0xfa, 0xc6, 0xd5, 0xac, 0x6f, 0x5c, 0xcf, 0xfa, 0xc6, 0x8b, 0x9b,
	0xfe, 0xc6, 0xd5, 0x4d, 0x7f, 0xe3, 0xed, 0x4d, 0x7f, 0xe3, 0xbf, 0xef, 0x47, 0x44, 0x8c, 0xb2,
	0xf0, 0x02, 0xc4, 0x90, 0xb2, 0xb1, 0xab, 0x5f, 0xb0, 0x80, 0x20, 0x71, 0xc7, 0xf4, 0x88, 0x27,
	0x01, 0x13, 0x47, 0x29, 0x8d, 0xc0, 0x7d, 0xaa, 0xfe, 0x31, 0x10, 0xd3, 0x4b, 0xe0, 0xa3, 0x2d,
	0xf9, 0xe7, 0xfe, 0xf4, 0x7d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x72, 0x14, 0xd3, 0x35, 0x08,
	0x00, 0x00,
}

func (m *EventCreateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionCreateCoin) > 0 {
		i -= len(m.CommissionCreateCoin)
		copy(dAtA[i:], m.CommissionCreateCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CommissionCreateCoin)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LimitVolume) > 0 {
		i -= len(m.LimitVolume)
		copy(dAtA[i:], m.LimitVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LimitVolume)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Reserve) > 0 {
		i -= len(m.Reserve)
		copy(dAtA[i:], m.Reserve)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reserve)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CRR != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CRR))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LimitVolume) > 0 {
		i -= len(m.LimitVolume)
		copy(dAtA[i:], m.LimitVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LimitVolume)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBuyCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBuyCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBuyCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToSellInBaseCoin) > 0 {
		i -= len(m.ToSellInBaseCoin)
		copy(dAtA[i:], m.ToSellInBaseCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToSellInBaseCoin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToSellCoin) > 0 {
		i -= len(m.ToSellCoin)
		copy(dAtA[i:], m.ToSellCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToSellCoin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToBuyCoin) > 0 {
		i -= len(m.ToBuyCoin)
		copy(dAtA[i:], m.ToBuyCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToBuyCoin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSellCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSellCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSellCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToSellInBaseCoin) > 0 {
		i -= len(m.ToSellInBaseCoin)
		copy(dAtA[i:], m.ToSellInBaseCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToSellInBaseCoin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToBuyCoin) > 0 {
		i -= len(m.ToBuyCoin)
		copy(dAtA[i:], m.ToBuyCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToBuyCoin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToSellCoin) > 0 {
		i -= len(m.ToSellCoin)
		copy(dAtA[i:], m.ToSellCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToSellCoin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMultiSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMultiSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMultiSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCheckRedeem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCheckRedeem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCheckRedeem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionRedeemCheck) > 0 {
		i -= len(m.CommissionRedeemCheck)
		copy(dAtA[i:], m.CommissionRedeemCheck)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CommissionRedeemCheck)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DueBlock) > 0 {
		i -= len(m.DueBlock)
		copy(dAtA[i:], m.DueBlock)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DueBlock)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventReturnLegacyBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReturnLegacyBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReturnLegacyBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinsToReturn) > 0 {
		i -= len(m.CoinsToReturn)
		copy(dAtA[i:], m.CoinsToReturn)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoinsToReturn)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LegacyAddress) > 0 {
		i -= len(m.LegacyAddress)
		copy(dAtA[i:], m.LegacyAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LegacyAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiSendReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSendReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiSendReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CRR != 0 {
		n += 1 + sovEvents(uint64(m.CRR))
	}
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Reserve)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LimitVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CommissionCreateCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LimitVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBuyCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToBuyCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToSellCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToSellInBaseCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSellCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToSellCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToBuyCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToSellInBaseCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMultiSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventCheckRedeem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DueBlock)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CommissionRedeemCheck)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventReturnLegacyBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LegacyAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CoinsToReturn)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *MultiSendReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRR", wireType)
			}
			m.CRR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRR |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCreateCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionCreateCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBuyCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBuyCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBuyCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBuyCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToBuyCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSellCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSellCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSellInBaseCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSellInBaseCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSellCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSellCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSellCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSellCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSellCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBuyCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToBuyCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSellInBaseCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSellInBaseCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMultiSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMultiSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMultiSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &MultiSendReceiver{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCheckRedeem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCheckRedeem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCheckRedeem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRedeemCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRedeemCheck = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReturnLegacyBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReturnLegacyBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReturnLegacyBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsToReturn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinsToReturn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiSendReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSendReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSendReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
