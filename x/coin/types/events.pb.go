// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/coin/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateCoin defines event emitted when new coin is created.
type EventCreateCoin struct {
	Sender               string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom                string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Title                string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	CRR                  uint32 `protobuf:"varint,4,opt,name=crr,proto3" json:"crr,omitempty"`
	InitialVolume        string `protobuf:"bytes,5,opt,name=initial_volume,json=initialVolume,proto3" json:"initial_volume,omitempty"`
	InitialReserve       string `protobuf:"bytes,6,opt,name=initial_reserve,json=initialReserve,proto3" json:"initial_reserve,omitempty"`
	LimitVolume          string `protobuf:"bytes,7,opt,name=limit_volume,json=limitVolume,proto3" json:"limit_volume,omitempty"`
	Identity             string `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity,omitempty"`
	CommissionCreateCoin string `protobuf:"bytes,9,opt,name=commission_create_coin,json=commissionCreateCoin,proto3" json:"commission_create_coin,omitempty"`
	MinVolume            string `protobuf:"bytes,10,opt,name=min_volume,json=minVolume,proto3" json:"min_volume,omitempty"`
}

func (m *EventCreateCoin) Reset()         { *m = EventCreateCoin{} }
func (m *EventCreateCoin) String() string { return proto.CompactTextString(m) }
func (*EventCreateCoin) ProtoMessage()    {}
func (*EventCreateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{0}
}
func (m *EventCreateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateCoin.Merge(m, src)
}
func (m *EventCreateCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateCoin proto.InternalMessageInfo

func (m *EventCreateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventCreateCoin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventCreateCoin) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventCreateCoin) GetCRR() uint32 {
	if m != nil {
		return m.CRR
	}
	return 0
}

func (m *EventCreateCoin) GetInitialVolume() string {
	if m != nil {
		return m.InitialVolume
	}
	return ""
}

func (m *EventCreateCoin) GetInitialReserve() string {
	if m != nil {
		return m.InitialReserve
	}
	return ""
}

func (m *EventCreateCoin) GetLimitVolume() string {
	if m != nil {
		return m.LimitVolume
	}
	return ""
}

func (m *EventCreateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *EventCreateCoin) GetCommissionCreateCoin() string {
	if m != nil {
		return m.CommissionCreateCoin
	}
	return ""
}

func (m *EventCreateCoin) GetMinVolume() string {
	if m != nil {
		return m.MinVolume
	}
	return ""
}

// EventUpdateCoin defines event emitted when existing coin is updated.
type EventUpdateCoin struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom       string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	LimitVolume string `protobuf:"bytes,3,opt,name=limit_volume,json=limitVolume,proto3" json:"limit_volume,omitempty"`
	Identity    string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	MinVolume   string `protobuf:"bytes,5,opt,name=min_volume,json=minVolume,proto3" json:"min_volume,omitempty"`
}

func (m *EventUpdateCoin) Reset()         { *m = EventUpdateCoin{} }
func (m *EventUpdateCoin) String() string { return proto.CompactTextString(m) }
func (*EventUpdateCoin) ProtoMessage()    {}
func (*EventUpdateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{1}
}
func (m *EventUpdateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateCoin.Merge(m, src)
}
func (m *EventUpdateCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateCoin proto.InternalMessageInfo

func (m *EventUpdateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventUpdateCoin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventUpdateCoin) GetLimitVolume() string {
	if m != nil {
		return m.LimitVolume
	}
	return ""
}

func (m *EventUpdateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *EventUpdateCoin) GetMinVolume() string {
	if m != nil {
		return m.MinVolume
	}
	return ""
}

// EventUpdateCoinVR defines event emitted when volume or reserve of existing coin is updated.
type EventUpdateCoinERC20Address struct {
	Drc20Address string `protobuf:"bytes,1,opt,name=drc20_address,json=drc20Address,proto3" json:"drc20_address,omitempty"`
}

func (m *EventUpdateCoinERC20Address) Reset()         { *m = EventUpdateCoinERC20Address{} }
func (m *EventUpdateCoinERC20Address) String() string { return proto.CompactTextString(m) }
func (*EventUpdateCoinERC20Address) ProtoMessage()    {}
func (*EventUpdateCoinERC20Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{2}
}
func (m *EventUpdateCoinERC20Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateCoinERC20Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateCoinERC20Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateCoinERC20Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateCoinERC20Address.Merge(m, src)
}
func (m *EventUpdateCoinERC20Address) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateCoinERC20Address) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateCoinERC20Address.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateCoinERC20Address proto.InternalMessageInfo

func (m *EventUpdateCoinERC20Address) GetDrc20Address() string {
	if m != nil {
		return m.Drc20Address
	}
	return ""
}

// EventUpdateCoinVR defines event emitted when volume or reserve of existing coin is updated.
type EventUpdateCoinVR struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Volume  string `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Reserve string `protobuf:"bytes,3,opt,name=reserve,proto3" json:"reserve,omitempty"`
}

func (m *EventUpdateCoinVR) Reset()         { *m = EventUpdateCoinVR{} }
func (m *EventUpdateCoinVR) String() string { return proto.CompactTextString(m) }
func (*EventUpdateCoinVR) ProtoMessage()    {}
func (*EventUpdateCoinVR) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{3}
}
func (m *EventUpdateCoinVR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateCoinVR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateCoinVR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateCoinVR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateCoinVR.Merge(m, src)
}
func (m *EventUpdateCoinVR) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateCoinVR) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateCoinVR.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateCoinVR proto.InternalMessageInfo

func (m *EventUpdateCoinVR) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventUpdateCoinVR) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *EventUpdateCoinVR) GetReserve() string {
	if m != nil {
		return m.Reserve
	}
	return ""
}

// EventSendCoin defines event emitted when a coin is transferred.
type EventSendCoin struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Coin      string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *EventSendCoin) Reset()         { *m = EventSendCoin{} }
func (m *EventSendCoin) String() string { return proto.CompactTextString(m) }
func (*EventSendCoin) ProtoMessage()    {}
func (*EventSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{4}
}
func (m *EventSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendCoin.Merge(m, src)
}
func (m *EventSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendCoin proto.InternalMessageInfo

func (m *EventSendCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSendCoin) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventSendCoin) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

// EventBuySellCoin defines event emitted when a coin is traded.
type EventBuySellCoin struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	CoinToBuy        string `protobuf:"bytes,2,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy,omitempty"`
	CoinToSell       string `protobuf:"bytes,3,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell,omitempty"`
	AmountInBaseCoin string `protobuf:"bytes,4,opt,name=amount_in_base_coin,json=amountInBaseCoin,proto3" json:"amount_in_base_coin,omitempty"`
}

func (m *EventBuySellCoin) Reset()         { *m = EventBuySellCoin{} }
func (m *EventBuySellCoin) String() string { return proto.CompactTextString(m) }
func (*EventBuySellCoin) ProtoMessage()    {}
func (*EventBuySellCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{5}
}
func (m *EventBuySellCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBuySellCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBuySellCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBuySellCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBuySellCoin.Merge(m, src)
}
func (m *EventBuySellCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventBuySellCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBuySellCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventBuySellCoin proto.InternalMessageInfo

func (m *EventBuySellCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventBuySellCoin) GetCoinToBuy() string {
	if m != nil {
		return m.CoinToBuy
	}
	return ""
}

func (m *EventBuySellCoin) GetCoinToSell() string {
	if m != nil {
		return m.CoinToSell
	}
	return ""
}

func (m *EventBuySellCoin) GetAmountInBaseCoin() string {
	if m != nil {
		return m.AmountInBaseCoin
	}
	return ""
}

// EventBurnCoin defines event emitted when a coin is burnt.
type EventBurnCoin struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Coin   string `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *EventBurnCoin) Reset()         { *m = EventBurnCoin{} }
func (m *EventBurnCoin) String() string { return proto.CompactTextString(m) }
func (*EventBurnCoin) ProtoMessage()    {}
func (*EventBurnCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{6}
}
func (m *EventBurnCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBurnCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBurnCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBurnCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBurnCoin.Merge(m, src)
}
func (m *EventBurnCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventBurnCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBurnCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventBurnCoin proto.InternalMessageInfo

func (m *EventBurnCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventBurnCoin) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

// EventRedeemCheck defines event emitted when a check is redeemed.
type EventRedeemCheck struct {
	Sender                string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Issuer                string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Coin                  string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Nonce                 string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	DueBlock              string `protobuf:"bytes,5,opt,name=due_block,json=dueBlock,proto3" json:"due_block,omitempty"`
	CommissionRedeemCheck string `protobuf:"bytes,6,opt,name=commission_redeem_check,json=commissionRedeemCheck,proto3" json:"commission_redeem_check,omitempty"`
}

func (m *EventRedeemCheck) Reset()         { *m = EventRedeemCheck{} }
func (m *EventRedeemCheck) String() string { return proto.CompactTextString(m) }
func (*EventRedeemCheck) ProtoMessage()    {}
func (*EventRedeemCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1c8461385eafed, []int{7}
}
func (m *EventRedeemCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRedeemCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRedeemCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRedeemCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRedeemCheck.Merge(m, src)
}
func (m *EventRedeemCheck) XXX_Size() int {
	return m.Size()
}
func (m *EventRedeemCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRedeemCheck.DiscardUnknown(m)
}

var xxx_messageInfo_EventRedeemCheck proto.InternalMessageInfo

func (m *EventRedeemCheck) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventRedeemCheck) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *EventRedeemCheck) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func (m *EventRedeemCheck) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventRedeemCheck) GetDueBlock() string {
	if m != nil {
		return m.DueBlock
	}
	return ""
}

func (m *EventRedeemCheck) GetCommissionRedeemCheck() string {
	if m != nil {
		return m.CommissionRedeemCheck
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateCoin)(nil), "decimal.coin.v1.EventCreateCoin")
	proto.RegisterType((*EventUpdateCoin)(nil), "decimal.coin.v1.EventUpdateCoin")
	proto.RegisterType((*EventUpdateCoinERC20Address)(nil), "decimal.coin.v1.EventUpdateCoinERC20Address")
	proto.RegisterType((*EventUpdateCoinVR)(nil), "decimal.coin.v1.EventUpdateCoinVR")
	proto.RegisterType((*EventSendCoin)(nil), "decimal.coin.v1.EventSendCoin")
	proto.RegisterType((*EventBuySellCoin)(nil), "decimal.coin.v1.EventBuySellCoin")
	proto.RegisterType((*EventBurnCoin)(nil), "decimal.coin.v1.EventBurnCoin")
	proto.RegisterType((*EventRedeemCheck)(nil), "decimal.coin.v1.EventRedeemCheck")
}

func init() { proto.RegisterFile("decimal/coin/v1/events.proto", fileDescriptor_ca1c8461385eafed) }

var fileDescriptor_ca1c8461385eafed = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0xad, 0x9b, 0x36, 0x6d, 0x6e, 0x9b, 0xd7, 0xbe, 0x79, 0x79, 0x7d, 0x6e, 0xfb, 0x08, 0x25,
	0x08, 0xd1, 0x4d, 0xe2, 0xb4, 0x54, 0xdd, 0xe3, 0xa8, 0x0b, 0x36, 0x2c, 0x5c, 0xda, 0x05, 0x2c,
	0x2c, 0xc7, 0xbe, 0x0a, 0xa3, 0xda, 0x33, 0xd1, 0xcc, 0x38, 0x22, 0x1f, 0x81, 0xc4, 0xc7, 0x80,
	0xf8, 0x05, 0x96, 0x15, 0x2b, 0x56, 0x08, 0xa5, 0x7b, 0x76, 0xec, 0x91, 0x67, 0xc6, 0x24, 0x44,
	0xa8, 0x48, 0x11, 0x3b, 0xdf, 0x7b, 0xce, 0xdc, 0x39, 0xe7, 0xcc, 0x78, 0xe0, 0xff, 0x04, 0x63,
	0x9a, 0x45, 0xa9, 0x17, 0x73, 0xca, 0xbc, 0xd1, 0x91, 0x87, 0x23, 0x64, 0x4a, 0x76, 0x86, 0x82,
	0x2b, 0x4e, 0xb6, 0x2c, 0xda, 0x29, 0xd0, 0xce, 0xe8, 0x68, 0xaf, 0x31, 0xe0, 0x03, 0xae, 0x31,
	0xaf, 0xf8, 0x32, 0xb4, 0xbd, 0xdd, 0x98, 0xcb, 0x8c, 0xcb, 0xd0, 0x00, 0xa6, 0x30, 0x50, 0xeb,
	0xeb, 0x32, 0x6c, 0x9d, 0x15, 0x23, 0x7b, 0x02, 0x23, 0x85, 0x3d, 0x4e, 0x19, 0xe9, 0x42, 0x55,
	0x22, 0x4b, 0x50, 0xb8, 0xce, 0x81, 0x73, 0x58, 0xf3, 0xdd, 0x8f, 0x6f, 0xdb, 0x0d, 0xbb, 0xea,
	0x71, 0x92, 0x08, 0x94, 0xf2, 0x5c, 0x09, 0xca, 0x06, 0x81, 0xe5, 0x91, 0x06, 0xac, 0x26, 0xc8,
	0x78, 0xe6, 0x2e, 0x17, 0x0b, 0x02, 0x53, 0x14, 0x5d, 0x45, 0x55, 0x8a, 0x6e, 0xc5, 0x74, 0x75,
	0x41, 0x76, 0xa1, 0x12, 0x0b, 0xe1, 0xae, 0x1c, 0x38, 0x87, 0x75, 0x7f, 0x6d, 0xf2, 0xf9, 0x6e,
	0xa5, 0x17, 0x04, 0x41, 0xd1, 0x23, 0x0f, 0xe0, 0x2f, 0xca, 0xa8, 0xa2, 0x51, 0x1a, 0x8e, 0x78,
	0x9a, 0x67, 0xe8, 0xae, 0xea, 0x95, 0x75, 0xdb, 0xbd, 0xd4, 0x4d, 0xf2, 0x10, 0xb6, 0x4a, 0x9a,
	0x40, 0x89, 0x62, 0x84, 0x6e, 0x55, 0xf3, 0xca, 0xd5, 0x81, 0xe9, 0x92, 0x7b, 0xb0, 0x99, 0xd2,
	0x8c, 0xaa, 0x72, 0xda, 0x9a, 0x66, 0x6d, 0xe8, 0x9e, 0x9d, 0xb5, 0x07, 0xeb, 0x34, 0x41, 0xa6,
	0xa8, 0x1a, 0xbb, 0xeb, 0x1a, 0xfe, 0x51, 0x93, 0x13, 0xd8, 0x89, 0x79, 0x96, 0x51, 0x29, 0x29,
	0x67, 0x61, 0xac, 0x03, 0x0a, 0x8b, 0xa4, 0xdd, 0x9a, 0x66, 0x36, 0xa6, 0xe8, 0x4c, 0x7a, 0x77,
	0x00, 0x32, 0xca, 0xca, 0x2d, 0x41, 0x33, 0x6b, 0x19, 0x65, 0x66, 0xc3, 0xd6, 0x7b, 0xc7, 0x06,
	0x7e, 0x31, 0x4c, 0xfe, 0x74, 0xe0, 0xf3, 0x7e, 0x2b, 0xb7, 0xfb, 0x5d, 0x99, 0xf3, 0xfb, 0xb3,
	0xf2, 0xd5, 0x79, 0xe5, 0x3e, 0xec, 0xcf, 0x09, 0x3f, 0x0b, 0x7a, 0xc7, 0x5d, 0x2b, 0x90, 0xdc,
	0x87, 0x7a, 0x22, 0xe2, 0xe3, 0x6e, 0x18, 0x99, 0x86, 0xf1, 0x12, 0x6c, 0xea, 0xa6, 0x25, 0xb5,
	0x5e, 0xc0, 0xdf, 0x73, 0x33, 0x2e, 0x83, 0xa9, 0x19, 0x67, 0xd6, 0xcc, 0x0e, 0x54, 0xad, 0x12,
	0xe3, 0xd1, 0x56, 0xc4, 0x85, 0xb5, 0xf2, 0xd4, 0x8d, 0xbf, 0xb2, 0x6c, 0xbd, 0x76, 0xa0, 0xae,
	0xa7, 0x9f, 0x23, 0x4b, 0x16, 0x0c, 0xf6, 0x14, 0x6a, 0x02, 0x63, 0x3a, 0xa4, 0xc8, 0x94, 0xd9,
	0xf8, 0x96, 0x45, 0x53, 0x2a, 0x21, 0xb0, 0xa2, 0x6f, 0x86, 0x91, 0xa4, 0xbf, 0x5b, 0xef, 0x1c,
	0xd8, 0xd6, 0x7a, 0xfc, 0x7c, 0x7c, 0x8e, 0x69, 0xba, 0xa0, 0xa4, 0x26, 0x6c, 0x14, 0xe3, 0x42,
	0xc5, 0xc3, 0x7e, 0x3e, 0xb6, 0x69, 0xd4, 0x8a, 0xd6, 0x33, 0xee, 0xe7, 0x63, 0x72, 0x00, 0x9b,
	0x25, 0x2e, 0x31, 0x4d, 0xad, 0x04, 0x30, 0x84, 0x62, 0x5f, 0xd2, 0x86, 0x7f, 0xa2, 0x8c, 0xe7,
	0x4c, 0x85, 0x94, 0x85, 0xfd, 0x48, 0xda, 0x5b, 0x6c, 0xce, 0x7f, 0xdb, 0x40, 0x4f, 0x98, 0x1f,
	0x49, 0x7d, 0x22, 0xad, 0x0b, 0x1b, 0xa3, 0x9f, 0x0b, 0xb6, 0xa0, 0xe6, 0x32, 0x8e, 0xe5, 0x99,
	0x38, 0xbe, 0x95, 0x71, 0x04, 0x98, 0x20, 0x66, 0xbd, 0x97, 0x18, 0x5f, 0x2d, 0x30, 0xba, 0x0b,
	0x55, 0x2a, 0x65, 0x8e, 0xe2, 0xb7, 0xc7, 0x63, 0x79, 0xbf, 0x3a, 0x9b, 0xe2, 0xce, 0x31, 0xce,
	0x62, 0xb4, 0x21, 0x98, 0x82, 0xec, 0x43, 0x2d, 0xc9, 0x31, 0xec, 0xa7, 0x3c, 0xbe, 0xb2, 0x3f,
	0xc0, 0x7a, 0x92, 0xa3, 0x5f, 0xd4, 0xe4, 0x14, 0xfe, 0x9b, 0x79, 0x0e, 0x84, 0x36, 0x11, 0xc6,
	0x85, 0x0b, 0xfb, 0xfc, 0xfc, 0x3b, 0x85, 0x67, 0x2c, 0xfa, 0x4f, 0x3f, 0x4c, 0x9a, 0xce, 0xf5,
	0xa4, 0xe9, 0x7c, 0x99, 0x34, 0x9d, 0x37, 0x37, 0xcd, 0xa5, 0xeb, 0x9b, 0xe6, 0xd2, 0xa7, 0x9b,
	0xe6, 0xd2, 0xf3, 0x93, 0x3e, 0x55, 0xfd, 0x3c, 0xbe, 0x42, 0xd5, 0xe1, 0x62, 0xe0, 0xd9, 0xc7,
	0x5c, 0x61, 0x94, 0x79, 0x03, 0xde, 0x96, 0x59, 0x24, 0x54, 0x9b, 0xf1, 0x04, 0xbd, 0x57, 0xe6,
	0xf9, 0x57, 0xe3, 0x21, 0xca, 0x7e, 0x55, 0xbf, 0xdc, 0x8f, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x32, 0x77, 0x10, 0xa6, 0x1b, 0x06, 0x00, 0x00,
}

func (m *EventCreateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinVolume) > 0 {
		i -= len(m.MinVolume)
		copy(dAtA[i:], m.MinVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MinVolume)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CommissionCreateCoin) > 0 {
		i -= len(m.CommissionCreateCoin)
		copy(dAtA[i:], m.CommissionCreateCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CommissionCreateCoin)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LimitVolume) > 0 {
		i -= len(m.LimitVolume)
		copy(dAtA[i:], m.LimitVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LimitVolume)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InitialReserve) > 0 {
		i -= len(m.InitialReserve)
		copy(dAtA[i:], m.InitialReserve)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InitialReserve)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InitialVolume) > 0 {
		i -= len(m.InitialVolume)
		copy(dAtA[i:], m.InitialVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InitialVolume)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CRR != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CRR))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinVolume) > 0 {
		i -= len(m.MinVolume)
		copy(dAtA[i:], m.MinVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MinVolume)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LimitVolume) > 0 {
		i -= len(m.LimitVolume)
		copy(dAtA[i:], m.LimitVolume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LimitVolume)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateCoinERC20Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateCoinERC20Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateCoinERC20Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Drc20Address) > 0 {
		i -= len(m.Drc20Address)
		copy(dAtA[i:], m.Drc20Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Drc20Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateCoinVR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateCoinVR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateCoinVR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserve) > 0 {
		i -= len(m.Reserve)
		copy(dAtA[i:], m.Reserve)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reserve)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBuySellCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBuySellCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBuySellCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountInBaseCoin) > 0 {
		i -= len(m.AmountInBaseCoin)
		copy(dAtA[i:], m.AmountInBaseCoin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AmountInBaseCoin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoinToSell) > 0 {
		i -= len(m.CoinToSell)
		copy(dAtA[i:], m.CoinToSell)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoinToSell)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoinToBuy) > 0 {
		i -= len(m.CoinToBuy)
		copy(dAtA[i:], m.CoinToBuy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoinToBuy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBurnCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBurnCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBurnCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRedeemCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRedeemCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRedeemCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionRedeemCheck) > 0 {
		i -= len(m.CommissionRedeemCheck)
		copy(dAtA[i:], m.CommissionRedeemCheck)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CommissionRedeemCheck)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DueBlock) > 0 {
		i -= len(m.DueBlock)
		copy(dAtA[i:], m.DueBlock)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DueBlock)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CRR != 0 {
		n += 1 + sovEvents(uint64(m.CRR))
	}
	l = len(m.InitialVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InitialReserve)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LimitVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CommissionCreateCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MinVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LimitVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MinVolume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateCoinERC20Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Drc20Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateCoinVR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Reserve)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBuySellCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CoinToBuy)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CoinToSell)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AmountInBaseCoin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBurnCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRedeemCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DueBlock)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CommissionRedeemCheck)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRR", wireType)
			}
			m.CRR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRR |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCreateCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionCreateCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateCoinERC20Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateCoinERC20Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateCoinERC20Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateCoinVR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateCoinVR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateCoinVR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBuySellCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBuySellCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBuySellCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToBuy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinToBuy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToSell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinToSell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountInBaseCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountInBaseCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBurnCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBurnCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBurnCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRedeemCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRedeemCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRedeemCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRedeemCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRedeemCheck = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
