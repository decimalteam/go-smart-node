// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/legacy/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventReturnLegacyCoins defines event emitted when the coins are returned to the actual owner.
type EventReturnLegacyCoins struct {
	LegacyOwner string                                   `protobuf:"bytes,1,opt,name=legacy_owner,json=legacyOwner,proto3" json:"legacy_owner,omitempty"`
	Owner       string                                   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Coins       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *EventReturnLegacyCoins) Reset()         { *m = EventReturnLegacyCoins{} }
func (m *EventReturnLegacyCoins) String() string { return proto.CompactTextString(m) }
func (*EventReturnLegacyCoins) ProtoMessage()    {}
func (*EventReturnLegacyCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c87b5331eb0201, []int{0}
}
func (m *EventReturnLegacyCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReturnLegacyCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReturnLegacyCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReturnLegacyCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReturnLegacyCoins.Merge(m, src)
}
func (m *EventReturnLegacyCoins) XXX_Size() int {
	return m.Size()
}
func (m *EventReturnLegacyCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReturnLegacyCoins.DiscardUnknown(m)
}

var xxx_messageInfo_EventReturnLegacyCoins proto.InternalMessageInfo

func (m *EventReturnLegacyCoins) GetLegacyOwner() string {
	if m != nil {
		return m.LegacyOwner
	}
	return ""
}

func (m *EventReturnLegacyCoins) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventReturnLegacyCoins) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

// EventReturnLegacySubToken defines event emitted when the NFT sub-token is returned to the actual owner.
type EventReturnLegacySubToken struct {
	LegacyOwner string   `protobuf:"bytes,1,opt,name=legacy_owner,json=legacyOwner,proto3" json:"legacy_owner,omitempty"`
	Owner       string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom       string   `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	ID          string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	SubTokenIDs []uint32 `protobuf:"varint,5,rep,packed,name=sub_token_ids,json=subTokenIds,proto3" json:"sub_token_ids,omitempty"`
}

func (m *EventReturnLegacySubToken) Reset()         { *m = EventReturnLegacySubToken{} }
func (m *EventReturnLegacySubToken) String() string { return proto.CompactTextString(m) }
func (*EventReturnLegacySubToken) ProtoMessage()    {}
func (*EventReturnLegacySubToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c87b5331eb0201, []int{1}
}
func (m *EventReturnLegacySubToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReturnLegacySubToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReturnLegacySubToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReturnLegacySubToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReturnLegacySubToken.Merge(m, src)
}
func (m *EventReturnLegacySubToken) XXX_Size() int {
	return m.Size()
}
func (m *EventReturnLegacySubToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReturnLegacySubToken.DiscardUnknown(m)
}

var xxx_messageInfo_EventReturnLegacySubToken proto.InternalMessageInfo

func (m *EventReturnLegacySubToken) GetLegacyOwner() string {
	if m != nil {
		return m.LegacyOwner
	}
	return ""
}

func (m *EventReturnLegacySubToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventReturnLegacySubToken) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventReturnLegacySubToken) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *EventReturnLegacySubToken) GetSubTokenIDs() []uint32 {
	if m != nil {
		return m.SubTokenIDs
	}
	return nil
}

// EventReturnMultisigWallet defines event emitted when the multisig wallet is returned to the actual owner.
type EventReturnMultisigWallet struct {
	LegacyOwner string `protobuf:"bytes,1,opt,name=legacy_owner,json=legacyOwner,proto3" json:"legacy_owner,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Wallet      string `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (m *EventReturnMultisigWallet) Reset()         { *m = EventReturnMultisigWallet{} }
func (m *EventReturnMultisigWallet) String() string { return proto.CompactTextString(m) }
func (*EventReturnMultisigWallet) ProtoMessage()    {}
func (*EventReturnMultisigWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c87b5331eb0201, []int{2}
}
func (m *EventReturnMultisigWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReturnMultisigWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReturnMultisigWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReturnMultisigWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReturnMultisigWallet.Merge(m, src)
}
func (m *EventReturnMultisigWallet) XXX_Size() int {
	return m.Size()
}
func (m *EventReturnMultisigWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReturnMultisigWallet.DiscardUnknown(m)
}

var xxx_messageInfo_EventReturnMultisigWallet proto.InternalMessageInfo

func (m *EventReturnMultisigWallet) GetLegacyOwner() string {
	if m != nil {
		return m.LegacyOwner
	}
	return ""
}

func (m *EventReturnMultisigWallet) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventReturnMultisigWallet) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

// EventReturnValidator defines event emitted when the validator reward address become actual.
type EventReturnValidator struct {
	LegacyOwner string `protobuf:"bytes,1,opt,name=legacy_owner,json=legacyOwner,proto3" json:"legacy_owner,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Validator   string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *EventReturnValidator) Reset()         { *m = EventReturnValidator{} }
func (m *EventReturnValidator) String() string { return proto.CompactTextString(m) }
func (*EventReturnValidator) ProtoMessage()    {}
func (*EventReturnValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c87b5331eb0201, []int{3}
}
func (m *EventReturnValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReturnValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReturnValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReturnValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReturnValidator.Merge(m, src)
}
func (m *EventReturnValidator) XXX_Size() int {
	return m.Size()
}
func (m *EventReturnValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReturnValidator.DiscardUnknown(m)
}

var xxx_messageInfo_EventReturnValidator proto.InternalMessageInfo

func (m *EventReturnValidator) GetLegacyOwner() string {
	if m != nil {
		return m.LegacyOwner
	}
	return ""
}

func (m *EventReturnValidator) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventReturnValidator) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func init() {
	proto.RegisterType((*EventReturnLegacyCoins)(nil), "decimal.legacy.v1.EventReturnLegacyCoins")
	proto.RegisterType((*EventReturnLegacySubToken)(nil), "decimal.legacy.v1.EventReturnLegacySubToken")
	proto.RegisterType((*EventReturnMultisigWallet)(nil), "decimal.legacy.v1.EventReturnMultisigWallet")
	proto.RegisterType((*EventReturnValidator)(nil), "decimal.legacy.v1.EventReturnValidator")
}

func init() { proto.RegisterFile("decimal/legacy/v1/events.proto", fileDescriptor_51c87b5331eb0201) }

var fileDescriptor_51c87b5331eb0201 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0x9b, 0xd6, 0x16, 0x76, 0xea, 0x22, 0x86, 0xb2, 0xa4, 0x7b, 0x48, 0x4b, 0x4f, 0xbd,
	0x74, 0x66, 0xeb, 0xc2, 0x5e, 0x3c, 0x59, 0xd7, 0xc3, 0x82, 0xa2, 0x64, 0x45, 0xc1, 0x4b, 0x99,
	0x64, 0x86, 0x38, 0x34, 0x99, 0x59, 0xf2, 0x9f, 0x64, 0xdd, 0xb7, 0xf0, 0x39, 0x3c, 0x7b, 0xd2,
	0x17, 0xd8, 0xe3, 0xe2, 0xc9, 0x53, 0x95, 0xf4, 0x22, 0xf8, 0x12, 0x32, 0x99, 0x29, 0x2a, 0x82,
	0x7b, 0xeb, 0x29, 0xf9, 0xf3, 0x7d, 0xff, 0xf9, 0x7e, 0x1f, 0x64, 0x82, 0x42, 0xc6, 0x13, 0x91,
	0xd3, 0x8c, 0x64, 0x3c, 0xa5, 0xc9, 0x15, 0xa9, 0xe6, 0x84, 0x57, 0x5c, 0x6a, 0xc0, 0x17, 0x85,
	0xd2, 0xca, 0xbf, 0xef, 0x74, 0x6c, 0x75, 0x5c, 0xcd, 0x0f, 0x07, 0xa9, 0x4a, 0x55, 0xa3, 0x12,
	0xf3, 0x66, 0x8d, 0x87, 0xc3, 0x44, 0x41, 0xae, 0x60, 0x69, 0x05, 0x3b, 0x38, 0x29, 0xb4, 0x13,
	0x89, 0x29, 0x70, 0x52, 0xcd, 0x63, 0xae, 0xe9, 0x9c, 0x24, 0x4a, 0x48, 0xab, 0x4f, 0x7e, 0x78,
	0xe8, 0xe0, 0x89, 0x09, 0x8d, 0xb8, 0x2e, 0x0b, 0xf9, 0xb4, 0x49, 0x7a, 0xac, 0x84, 0x04, 0xff,
	0x21, 0xba, 0x6b, 0x83, 0x97, 0xea, 0x52, 0xf2, 0x22, 0xf0, 0xc6, 0xde, 0x74, 0x6f, 0x11, 0x7c,
	0xf9, 0x38, 0x1b, 0xb8, 0x88, 0x47, 0x8c, 0x15, 0x1c, 0xe0, 0x5c, 0x17, 0x42, 0xa6, 0x51, 0xdf,
	0xba, 0x9f, 0x1b, 0xb3, 0x8f, 0x51, 0xd7, 0x6e, 0xb5, 0x6f, 0xd9, 0xb2, 0x36, 0x9f, 0xa2, 0xae,
	0xa1, 0x82, 0xa0, 0x33, 0xee, 0x4c, 0xfb, 0x0f, 0x86, 0xd8, 0x99, 0x0d, 0x37, 0x76, 0xdc, 0xd8,
	0x70, 0x2d, 0x8e, 0xae, 0xd7, 0xa3, 0xd6, 0x87, 0x6f, 0xa3, 0x69, 0x2a, 0xf4, 0xdb, 0x32, 0xc6,
	0x89, 0xca, 0x5d, 0x65, 0xf7, 0x98, 0x01, 0x5b, 0x11, 0x7d, 0x75, 0xc1, 0xa1, 0x59, 0x80, 0xc8,
	0x9e, 0x3c, 0xf9, 0xe9, 0xa1, 0xe1, 0x3f, 0x55, 0xcf, 0xcb, 0xf8, 0xa5, 0x5a, 0x71, 0xb9, 0xdb,
	0xb6, 0x03, 0xd4, 0x65, 0x5c, 0xaa, 0x3c, 0xe8, 0x18, 0x7f, 0x64, 0x07, 0xff, 0x00, 0xb5, 0x05,
	0x0b, 0xee, 0x34, 0x47, 0xf4, 0xea, 0xf5, 0xa8, 0x7d, 0x76, 0x1a, 0xb5, 0x05, 0xf3, 0x8f, 0xd1,
	0x3e, 0x94, 0xf1, 0x52, 0x1b, 0xce, 0xa5, 0x60, 0x10, 0x74, 0xc7, 0x9d, 0xe9, 0xfe, 0xe2, 0x5e,
	0xbd, 0x1e, 0xf5, 0xb7, 0xfc, 0x67, 0xa7, 0x10, 0xf5, 0x61, 0x3b, 0x30, 0x98, 0x7c, 0xfa, 0xbb,
	0xed, 0xb3, 0x32, 0xd3, 0x02, 0x44, 0xfa, 0x9a, 0x66, 0x19, 0xd7, 0xbb, 0x6d, 0x7b, 0x84, 0x7a,
	0x97, 0x4d, 0xac, 0xad, 0xfb, 0x9f, 0x05, 0xe7, 0x9b, 0x7c, 0xf6, 0xd0, 0xe0, 0x0f, 0xf8, 0x57,
	0x34, 0x13, 0x8c, 0x6a, 0x55, 0xec, 0x96, 0xfb, 0x04, 0xed, 0x55, 0xdb, 0xe4, 0x5b, 0xd1, 0x7f,
	0x5b, 0x17, 0x2f, 0xae, 0xeb, 0xd0, 0xbb, 0xa9, 0x43, 0xef, 0x7b, 0x1d, 0x7a, 0xef, 0x37, 0x61,
	0xeb, 0x66, 0x13, 0xb6, 0xbe, 0x6e, 0xc2, 0xd6, 0x9b, 0x93, 0x58, 0xe8, 0xb8, 0x4c, 0x56, 0x5c,
	0x63, 0x55, 0xa4, 0xc4, 0xdd, 0x6f, 0xcd, 0x69, 0x4e, 0x52, 0x35, 0x83, 0x9c, 0x16, 0x7a, 0x26,
	0x15, 0xe3, 0xe4, 0xdd, 0xf6, 0x9f, 0xd0, 0x7c, 0xc7, 0x71, 0xaf, 0xb9, 0xac, 0xc7, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf0, 0x40, 0x17, 0x70, 0x32, 0x04, 0x00, 0x00,
}

func (m *EventReturnLegacyCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReturnLegacyCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReturnLegacyCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LegacyOwner) > 0 {
		i -= len(m.LegacyOwner)
		copy(dAtA[i:], m.LegacyOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LegacyOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventReturnLegacySubToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReturnLegacySubToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReturnLegacySubToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubTokenIDs) > 0 {
		dAtA2 := make([]byte, len(m.SubTokenIDs)*10)
		var j1 int
		for _, num := range m.SubTokenIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvents(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LegacyOwner) > 0 {
		i -= len(m.LegacyOwner)
		copy(dAtA[i:], m.LegacyOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LegacyOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventReturnMultisigWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReturnMultisigWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReturnMultisigWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallet) > 0 {
		i -= len(m.Wallet)
		copy(dAtA[i:], m.Wallet)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Wallet)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LegacyOwner) > 0 {
		i -= len(m.LegacyOwner)
		copy(dAtA[i:], m.LegacyOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LegacyOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventReturnValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReturnValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReturnValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LegacyOwner) > 0 {
		i -= len(m.LegacyOwner)
		copy(dAtA[i:], m.LegacyOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LegacyOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventReturnLegacyCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LegacyOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventReturnLegacySubToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LegacyOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.SubTokenIDs) > 0 {
		l = 0
		for _, e := range m.SubTokenIDs {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventReturnMultisigWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LegacyOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Wallet)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventReturnValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LegacyOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventReturnLegacyCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReturnLegacyCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReturnLegacyCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReturnLegacySubToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReturnLegacySubToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReturnLegacySubToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubTokenIDs = append(m.SubTokenIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubTokenIDs) == 0 {
					m.SubTokenIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubTokenIDs = append(m.SubTokenIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTokenIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReturnMultisigWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReturnMultisigWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReturnMultisigWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReturnValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReturnValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReturnValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
