// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/x/bank/keeper (interfaces: Keeper)

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	keeper "github.com/cosmos/cosmos-sdk/x/bank/keeper"
	types0 "github.com/cosmos/cosmos-sdk/x/bank/types"
	gomock "github.com/golang/mock/gomock"
)

// MockKeeper is a mock of Keeper interface.
type MockKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperMockRecorder
}

// MockKeeperMockRecorder is the mock recorder for MockKeeper.
type MockKeeperMockRecorder struct {
	mock *MockKeeper
}

// NewMockKeeper creates a new mock instance.
func NewMockKeeper(ctrl *gomock.Controller) *MockKeeper {
	mock := &MockKeeper{ctrl: ctrl}
	mock.recorder = &MockKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeper) EXPECT() *MockKeeperMockRecorder {
	return m.recorder
}

// AllBalances mocks base method.
func (m *MockKeeper) AllBalances(arg0 context.Context, arg1 *types0.QueryAllBalancesRequest) (*types0.QueryAllBalancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBalances", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryAllBalancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBalances indicates an expected call of AllBalances.
func (mr *MockKeeperMockRecorder) AllBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBalances", reflect.TypeOf((*MockKeeper)(nil).AllBalances), arg0, arg1)
}

// Balance mocks base method.
func (m *MockKeeper) Balance(arg0 context.Context, arg1 *types0.QueryBalanceRequest) (*types0.QueryBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockKeeperMockRecorder) Balance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockKeeper)(nil).Balance), arg0, arg1)
}

// BlockedAddr mocks base method.
func (m *MockKeeper) BlockedAddr(arg0 types.AccAddress) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockedAddr", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BlockedAddr indicates an expected call of BlockedAddr.
func (mr *MockKeeperMockRecorder) BlockedAddr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedAddr", reflect.TypeOf((*MockKeeper)(nil).BlockedAddr), arg0)
}

// BurnCoins mocks base method.
func (m *MockKeeper) BurnCoins(arg0 types.Context, arg1 string, arg2 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BurnCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BurnCoins indicates an expected call of BurnCoins.
func (mr *MockKeeperMockRecorder) BurnCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BurnCoins", reflect.TypeOf((*MockKeeper)(nil).BurnCoins), arg0, arg1, arg2)
}

// DelegateCoins mocks base method.
func (m *MockKeeper) DelegateCoins(arg0 types.Context, arg1, arg2 types.AccAddress, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateCoins", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateCoins indicates an expected call of DelegateCoins.
func (mr *MockKeeperMockRecorder) DelegateCoins(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateCoins", reflect.TypeOf((*MockKeeper)(nil).DelegateCoins), arg0, arg1, arg2, arg3)
}

// DelegateCoinsFromAccountToModule mocks base method.
func (m *MockKeeper) DelegateCoinsFromAccountToModule(arg0 types.Context, arg1 types.AccAddress, arg2 string, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateCoinsFromAccountToModule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateCoinsFromAccountToModule indicates an expected call of DelegateCoinsFromAccountToModule.
func (mr *MockKeeperMockRecorder) DelegateCoinsFromAccountToModule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateCoinsFromAccountToModule", reflect.TypeOf((*MockKeeper)(nil).DelegateCoinsFromAccountToModule), arg0, arg1, arg2, arg3)
}

// DenomMetadata mocks base method.
func (m *MockKeeper) DenomMetadata(arg0 context.Context, arg1 *types0.QueryDenomMetadataRequest) (*types0.QueryDenomMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenomMetadata", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryDenomMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenomMetadata indicates an expected call of DenomMetadata.
func (mr *MockKeeperMockRecorder) DenomMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenomMetadata", reflect.TypeOf((*MockKeeper)(nil).DenomMetadata), arg0, arg1)
}

// DenomOwners mocks base method.
func (m *MockKeeper) DenomOwners(arg0 context.Context, arg1 *types0.QueryDenomOwnersRequest) (*types0.QueryDenomOwnersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenomOwners", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryDenomOwnersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenomOwners indicates an expected call of DenomOwners.
func (mr *MockKeeperMockRecorder) DenomOwners(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenomOwners", reflect.TypeOf((*MockKeeper)(nil).DenomOwners), arg0, arg1)
}

// DenomsMetadata mocks base method.
func (m *MockKeeper) DenomsMetadata(arg0 context.Context, arg1 *types0.QueryDenomsMetadataRequest) (*types0.QueryDenomsMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenomsMetadata", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryDenomsMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenomsMetadata indicates an expected call of DenomsMetadata.
func (mr *MockKeeperMockRecorder) DenomsMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenomsMetadata", reflect.TypeOf((*MockKeeper)(nil).DenomsMetadata), arg0, arg1)
}

// ExportGenesis mocks base method.
func (m *MockKeeper) ExportGenesis(arg0 types.Context) *types0.GenesisState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportGenesis", arg0)
	ret0, _ := ret[0].(*types0.GenesisState)
	return ret0
}

// ExportGenesis indicates an expected call of ExportGenesis.
func (mr *MockKeeperMockRecorder) ExportGenesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportGenesis", reflect.TypeOf((*MockKeeper)(nil).ExportGenesis), arg0)
}

// GetAccountsBalances mocks base method.
func (m *MockKeeper) GetAccountsBalances(arg0 types.Context) []types0.Balance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalances", arg0)
	ret0, _ := ret[0].([]types0.Balance)
	return ret0
}

// GetAccountsBalances indicates an expected call of GetAccountsBalances.
func (mr *MockKeeperMockRecorder) GetAccountsBalances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalances", reflect.TypeOf((*MockKeeper)(nil).GetAccountsBalances), arg0)
}

// GetAllBalances mocks base method.
func (m *MockKeeper) GetAllBalances(arg0 types.Context, arg1 types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBalances", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// GetAllBalances indicates an expected call of GetAllBalances.
func (mr *MockKeeperMockRecorder) GetAllBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBalances", reflect.TypeOf((*MockKeeper)(nil).GetAllBalances), arg0, arg1)
}

// GetBalance mocks base method.
func (m *MockKeeper) GetBalance(arg0 types.Context, arg1 types.AccAddress, arg2 string) types.Coin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Coin)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockKeeperMockRecorder) GetBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockKeeper)(nil).GetBalance), arg0, arg1, arg2)
}

// GetDenomMetaData mocks base method.
func (m *MockKeeper) GetDenomMetaData(arg0 types.Context, arg1 string) (types0.Metadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenomMetaData", arg0, arg1)
	ret0, _ := ret[0].(types0.Metadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDenomMetaData indicates an expected call of GetDenomMetaData.
func (mr *MockKeeperMockRecorder) GetDenomMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenomMetaData", reflect.TypeOf((*MockKeeper)(nil).GetDenomMetaData), arg0, arg1)
}

// GetPaginatedTotalSupply mocks base method.
func (m *MockKeeper) GetPaginatedTotalSupply(arg0 types.Context, arg1 *query.PageRequest) (types.Coins, *query.PageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedTotalSupply", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(*query.PageResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginatedTotalSupply indicates an expected call of GetPaginatedTotalSupply.
func (mr *MockKeeperMockRecorder) GetPaginatedTotalSupply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedTotalSupply", reflect.TypeOf((*MockKeeper)(nil).GetPaginatedTotalSupply), arg0, arg1)
}

// GetParams mocks base method.
func (m *MockKeeper) GetParams(arg0 types.Context) types0.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", arg0)
	ret0, _ := ret[0].(types0.Params)
	return ret0
}

// GetParams indicates an expected call of GetParams.
func (mr *MockKeeperMockRecorder) GetParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockKeeper)(nil).GetParams), arg0)
}

// GetSupply mocks base method.
func (m *MockKeeper) GetSupply(arg0 types.Context, arg1 string) types.Coin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupply", arg0, arg1)
	ret0, _ := ret[0].(types.Coin)
	return ret0
}

// GetSupply indicates an expected call of GetSupply.
func (mr *MockKeeperMockRecorder) GetSupply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupply", reflect.TypeOf((*MockKeeper)(nil).GetSupply), arg0, arg1)
}

// HasBalance mocks base method.
func (m *MockKeeper) HasBalance(arg0 types.Context, arg1 types.AccAddress, arg2 types.Coin) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBalance indicates an expected call of HasBalance.
func (mr *MockKeeperMockRecorder) HasBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBalance", reflect.TypeOf((*MockKeeper)(nil).HasBalance), arg0, arg1, arg2)
}

// HasDenomMetaData mocks base method.
func (m *MockKeeper) HasDenomMetaData(arg0 types.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDenomMetaData", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDenomMetaData indicates an expected call of HasDenomMetaData.
func (mr *MockKeeperMockRecorder) HasDenomMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDenomMetaData", reflect.TypeOf((*MockKeeper)(nil).HasDenomMetaData), arg0, arg1)
}

// HasSupply mocks base method.
func (m *MockKeeper) HasSupply(arg0 types.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSupply", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSupply indicates an expected call of HasSupply.
func (mr *MockKeeperMockRecorder) HasSupply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSupply", reflect.TypeOf((*MockKeeper)(nil).HasSupply), arg0, arg1)
}

// InitGenesis mocks base method.
func (m *MockKeeper) InitGenesis(arg0 types.Context, arg1 *types0.GenesisState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitGenesis", arg0, arg1)
}

// InitGenesis indicates an expected call of InitGenesis.
func (mr *MockKeeperMockRecorder) InitGenesis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGenesis", reflect.TypeOf((*MockKeeper)(nil).InitGenesis), arg0, arg1)
}

// InputOutputCoins mocks base method.
func (m *MockKeeper) InputOutputCoins(arg0 types.Context, arg1 []types0.Input, arg2 []types0.Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputOutputCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InputOutputCoins indicates an expected call of InputOutputCoins.
func (mr *MockKeeperMockRecorder) InputOutputCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputOutputCoins", reflect.TypeOf((*MockKeeper)(nil).InputOutputCoins), arg0, arg1, arg2)
}

// IsSendEnabledCoin mocks base method.
func (m *MockKeeper) IsSendEnabledCoin(arg0 types.Context, arg1 types.Coin) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSendEnabledCoin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSendEnabledCoin indicates an expected call of IsSendEnabledCoin.
func (mr *MockKeeperMockRecorder) IsSendEnabledCoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSendEnabledCoin", reflect.TypeOf((*MockKeeper)(nil).IsSendEnabledCoin), arg0, arg1)
}

// IsSendEnabledCoins mocks base method.
func (m *MockKeeper) IsSendEnabledCoins(arg0 types.Context, arg1 ...types.Coin) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSendEnabledCoins", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsSendEnabledCoins indicates an expected call of IsSendEnabledCoins.
func (mr *MockKeeperMockRecorder) IsSendEnabledCoins(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSendEnabledCoins", reflect.TypeOf((*MockKeeper)(nil).IsSendEnabledCoins), varargs...)
}

// IterateAccountBalances mocks base method.
func (m *MockKeeper) IterateAccountBalances(arg0 types.Context, arg1 types.AccAddress, arg2 func(types.Coin) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateAccountBalances", arg0, arg1, arg2)
}

// IterateAccountBalances indicates an expected call of IterateAccountBalances.
func (mr *MockKeeperMockRecorder) IterateAccountBalances(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateAccountBalances", reflect.TypeOf((*MockKeeper)(nil).IterateAccountBalances), arg0, arg1, arg2)
}

// IterateAllBalances mocks base method.
func (m *MockKeeper) IterateAllBalances(arg0 types.Context, arg1 func(types.AccAddress, types.Coin) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateAllBalances", arg0, arg1)
}

// IterateAllBalances indicates an expected call of IterateAllBalances.
func (mr *MockKeeperMockRecorder) IterateAllBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateAllBalances", reflect.TypeOf((*MockKeeper)(nil).IterateAllBalances), arg0, arg1)
}

// IterateAllDenomMetaData mocks base method.
func (m *MockKeeper) IterateAllDenomMetaData(arg0 types.Context, arg1 func(types0.Metadata) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateAllDenomMetaData", arg0, arg1)
}

// IterateAllDenomMetaData indicates an expected call of IterateAllDenomMetaData.
func (mr *MockKeeperMockRecorder) IterateAllDenomMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateAllDenomMetaData", reflect.TypeOf((*MockKeeper)(nil).IterateAllDenomMetaData), arg0, arg1)
}

// IterateTotalSupply mocks base method.
func (m *MockKeeper) IterateTotalSupply(arg0 types.Context, arg1 func(types.Coin) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateTotalSupply", arg0, arg1)
}

// IterateTotalSupply indicates an expected call of IterateTotalSupply.
func (mr *MockKeeperMockRecorder) IterateTotalSupply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateTotalSupply", reflect.TypeOf((*MockKeeper)(nil).IterateTotalSupply), arg0, arg1)
}

// LockedCoins mocks base method.
func (m *MockKeeper) LockedCoins(arg0 types.Context, arg1 types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockedCoins", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// LockedCoins indicates an expected call of LockedCoins.
func (mr *MockKeeperMockRecorder) LockedCoins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockedCoins", reflect.TypeOf((*MockKeeper)(nil).LockedCoins), arg0, arg1)
}

// MintCoins mocks base method.
func (m *MockKeeper) MintCoins(arg0 types.Context, arg1 string, arg2 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MintCoins indicates an expected call of MintCoins.
func (mr *MockKeeperMockRecorder) MintCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintCoins", reflect.TypeOf((*MockKeeper)(nil).MintCoins), arg0, arg1, arg2)
}

// Params mocks base method.
func (m *MockKeeper) Params(arg0 context.Context, arg1 *types0.QueryParamsRequest) (*types0.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockKeeperMockRecorder) Params(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockKeeper)(nil).Params), arg0, arg1)
}

// SendCoins mocks base method.
func (m *MockKeeper) SendCoins(arg0 types.Context, arg1, arg2 types.AccAddress, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockKeeperMockRecorder) SendCoins(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockKeeper)(nil).SendCoins), arg0, arg1, arg2, arg3)
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockKeeper) SendCoinsFromAccountToModule(arg0 types.Context, arg1 types.AccAddress, arg2 string, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockKeeperMockRecorder) SendCoinsFromAccountToModule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockKeeper)(nil).SendCoinsFromAccountToModule), arg0, arg1, arg2, arg3)
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockKeeper) SendCoinsFromModuleToAccount(arg0 types.Context, arg1 string, arg2 types.AccAddress, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockKeeperMockRecorder) SendCoinsFromModuleToAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockKeeper)(nil).SendCoinsFromModuleToAccount), arg0, arg1, arg2, arg3)
}

// SendCoinsFromModuleToModule mocks base method.
func (m *MockKeeper) SendCoinsFromModuleToModule(arg0 types.Context, arg1, arg2 string, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToModule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToModule indicates an expected call of SendCoinsFromModuleToModule.
func (mr *MockKeeperMockRecorder) SendCoinsFromModuleToModule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToModule", reflect.TypeOf((*MockKeeper)(nil).SendCoinsFromModuleToModule), arg0, arg1, arg2, arg3)
}

// SetDenomMetaData mocks base method.
func (m *MockKeeper) SetDenomMetaData(arg0 types.Context, arg1 types0.Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDenomMetaData", arg0, arg1)
}

// SetDenomMetaData indicates an expected call of SetDenomMetaData.
func (mr *MockKeeperMockRecorder) SetDenomMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDenomMetaData", reflect.TypeOf((*MockKeeper)(nil).SetDenomMetaData), arg0, arg1)
}

// SetParams mocks base method.
func (m *MockKeeper) SetParams(arg0 types.Context, arg1 types0.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParams", arg0, arg1)
}

// SetParams indicates an expected call of SetParams.
func (mr *MockKeeperMockRecorder) SetParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockKeeper)(nil).SetParams), arg0, arg1)
}

// SpendableBalances mocks base method.
func (m *MockKeeper) SpendableBalances(arg0 context.Context, arg1 *types0.QuerySpendableBalancesRequest) (*types0.QuerySpendableBalancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableBalances", arg0, arg1)
	ret0, _ := ret[0].(*types0.QuerySpendableBalancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpendableBalances indicates an expected call of SpendableBalances.
func (mr *MockKeeperMockRecorder) SpendableBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableBalances", reflect.TypeOf((*MockKeeper)(nil).SpendableBalances), arg0, arg1)
}

// SpendableCoins mocks base method.
func (m *MockKeeper) SpendableCoins(arg0 types.Context, arg1 types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockKeeperMockRecorder) SpendableCoins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockKeeper)(nil).SpendableCoins), arg0, arg1)
}

// SupplyOf mocks base method.
func (m *MockKeeper) SupplyOf(arg0 context.Context, arg1 *types0.QuerySupplyOfRequest) (*types0.QuerySupplyOfResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupplyOf", arg0, arg1)
	ret0, _ := ret[0].(*types0.QuerySupplyOfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupplyOf indicates an expected call of SupplyOf.
func (mr *MockKeeperMockRecorder) SupplyOf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplyOf", reflect.TypeOf((*MockKeeper)(nil).SupplyOf), arg0, arg1)
}

// TotalSupply mocks base method.
func (m *MockKeeper) TotalSupply(arg0 context.Context, arg1 *types0.QueryTotalSupplyRequest) (*types0.QueryTotalSupplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryTotalSupplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockKeeperMockRecorder) TotalSupply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockKeeper)(nil).TotalSupply), arg0, arg1)
}

// UndelegateCoins mocks base method.
func (m *MockKeeper) UndelegateCoins(arg0 types.Context, arg1, arg2 types.AccAddress, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndelegateCoins", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndelegateCoins indicates an expected call of UndelegateCoins.
func (mr *MockKeeperMockRecorder) UndelegateCoins(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndelegateCoins", reflect.TypeOf((*MockKeeper)(nil).UndelegateCoins), arg0, arg1, arg2, arg3)
}

// UndelegateCoinsFromModuleToAccount mocks base method.
func (m *MockKeeper) UndelegateCoinsFromModuleToAccount(arg0 types.Context, arg1 string, arg2 types.AccAddress, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndelegateCoinsFromModuleToAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndelegateCoinsFromModuleToAccount indicates an expected call of UndelegateCoinsFromModuleToAccount.
func (mr *MockKeeperMockRecorder) UndelegateCoinsFromModuleToAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndelegateCoinsFromModuleToAccount", reflect.TypeOf((*MockKeeper)(nil).UndelegateCoinsFromModuleToAccount), arg0, arg1, arg2, arg3)
}

// ValidateBalance mocks base method.
func (m *MockKeeper) ValidateBalance(arg0 types.Context, arg1 types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBalance indicates an expected call of ValidateBalance.
func (mr *MockKeeperMockRecorder) ValidateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBalance", reflect.TypeOf((*MockKeeper)(nil).ValidateBalance), arg0, arg1)
}

// WithMintCoinsRestriction mocks base method.
func (m *MockKeeper) WithMintCoinsRestriction(arg0 keeper.MintingRestrictionFn) keeper.BaseKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMintCoinsRestriction", arg0)
	ret0, _ := ret[0].(keeper.BaseKeeper)
	return ret0
}

// WithMintCoinsRestriction indicates an expected call of WithMintCoinsRestriction.
func (mr *MockKeeperMockRecorder) WithMintCoinsRestriction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMintCoinsRestriction", reflect.TypeOf((*MockKeeper)(nil).WithMintCoinsRestriction), arg0)
}
