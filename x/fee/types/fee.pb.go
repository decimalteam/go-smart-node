// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/fee/v1/fee.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CoinPrice defines the coin price.
type CoinPrice struct {
	// denom defines the base currency (coin) denomination which is priced.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// quote defines the quote currency denomination in the pair (USD as the first example).
	Quote string `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	// price defines the coin price in quote currency.
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// updated_at defines the moment of the previous coin price update.
	UpdatedAt time.Time `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *CoinPrice) Reset()         { *m = CoinPrice{} }
func (m *CoinPrice) String() string { return proto.CompactTextString(m) }
func (*CoinPrice) ProtoMessage()    {}
func (*CoinPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1bc374db45a253, []int{0}
}
func (m *CoinPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinPrice.Merge(m, src)
}
func (m *CoinPrice) XXX_Size() int {
	return m.Size()
}
func (m *CoinPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinPrice.DiscardUnknown(m)
}

var xxx_messageInfo_CoinPrice proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CoinPrice)(nil), "decimal.fee.v1.CoinPrice")
}

func init() { proto.RegisterFile("decimal/fee/v1/fee.proto", fileDescriptor_0d1bc374db45a253) }

var fileDescriptor_0d1bc374db45a253 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x51, 0x3d, 0x4f, 0xeb, 0x30,
	0x14, 0x8d, 0xdf, 0x7b, 0x7d, 0x7a, 0xcd, 0x43, 0x0c, 0x51, 0x87, 0xd0, 0x21, 0xa9, 0x18, 0x50,
	0x97, 0xd8, 0x2a, 0xdd, 0x10, 0x0b, 0x6d, 0x57, 0x24, 0x14, 0x31, 0xb1, 0x54, 0xf9, 0xb8, 0x35,
	0x51, 0xeb, 0xde, 0x90, 0x38, 0x15, 0xfc, 0x03, 0xc6, 0x8e, 0x8c, 0xfd, 0x11, 0xfc, 0x88, 0x8e,
	0x15, 0x13, 0x62, 0x28, 0xa8, 0x5d, 0xf8, 0x19, 0xc8, 0xb1, 0x3b, 0x5d, 0x9f, 0x73, 0xef, 0xf1,
	0x3d, 0xc7, 0xb6, 0xdd, 0x14, 0x92, 0x4c, 0x44, 0x33, 0x36, 0x01, 0x60, 0x8b, 0x9e, 0x2a, 0x34,
	0x2f, 0x50, 0xa2, 0x73, 0x6c, 0x3a, 0x54, 0x51, 0x8b, 0x5e, 0xbb, 0xc5, 0x91, 0x63, 0xdd, 0x62,
	0xea, 0xa4, 0xa7, 0xda, 0x3e, 0x47, 0xe4, 0x33, 0x60, 0x35, 0x8a, 0xab, 0x09, 0x93, 0x99, 0x80,
	0x52, 0x46, 0x22, 0x37, 0x03, 0x27, 0x09, 0x96, 0x02, 0xcb, 0xb1, 0x56, 0x6a, 0xa0, 0x5b, 0xa7,
	0x5b, 0x62, 0x37, 0x87, 0x98, 0xcd, 0x6f, 0x8a, 0x2c, 0x01, 0xa7, 0x65, 0x37, 0x52, 0x98, 0xa3,
	0x70, 0x49, 0x87, 0x74, 0x9b, 0xa1, 0x06, 0x8a, 0x7d, 0xa8, 0x50, 0x82, 0xfb, 0x4b, 0xb3, 0x35,
	0x70, 0x42, 0xbb, 0x91, 0x2b, 0x91, 0xfb, 0x5b, 0xb1, 0x83, 0xcb, 0xf5, 0xd6, 0xb7, 0x3e, 0xb6,
	0xfe, 0x19, 0xcf, 0xe4, 0x7d, 0x15, 0xd3, 0x04, 0x85, 0xd9, 0x64, 0x4a, 0x50, 0xa6, 0x53, 0x26,
	0x9f, 0x72, 0x28, 0xe9, 0x08, 0x92, 0xb7, 0xd7, 0xc0, 0x36, 0x46, 0x46, 0x90, 0x84, 0xfa, 0x2a,
	0x67, 0x68, 0xdb, 0x55, 0x9e, 0x46, 0x12, 0xd2, 0x71, 0x24, 0xdd, 0x3f, 0x1d, 0xd2, 0xfd, 0x7f,
	0xde, 0xa6, 0x3a, 0x1e, 0x3d, 0xc4, 0xa3, 0xb7, 0x87, 0x78, 0x83, 0x7f, 0x6a, 0xe9, 0xf2, 0xd3,
	0x27, 0x61, 0xd3, 0xe8, 0xae, 0xe4, 0xc5, 0xd1, 0xf3, 0xca, 0xb7, 0x5e, 0x56, 0x3e, 0xf9, 0x5e,
	0xf9, 0x64, 0x70, 0xbd, 0xde, 0x79, 0x64, 0xb3, 0xf3, 0xc8, 0xd7, 0xce, 0x23, 0xcb, 0xbd, 0x67,
	0x6d, 0xf6, 0x9e, 0xf5, 0xbe, 0xf7, 0xac, 0xbb, 0x7e, 0x9c, 0xc9, 0xb8, 0x4a, 0xa6, 0x20, 0x29,
	0x16, 0x9c, 0x99, 0xa7, 0x96, 0x10, 0x09, 0xc6, 0x31, 0x28, 0x45, 0x54, 0xc8, 0x60, 0x8e, 0x29,
	0xb0, 0xc7, 0xfa, 0x63, 0x6a, 0xeb, 0xf1, 0xdf, 0xda, 0x45, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x99, 0xa3, 0xdf, 0x7a, 0xb4, 0x01, 0x00, 0x00,
}

func (this *CoinPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinPrice)
	if !ok {
		that2, ok := that.(CoinPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Quote != that1.Quote {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (m *CoinPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintFee(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFee(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovFee(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovFee(uint64(l))
	return n
}

func sovFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFee(x uint64) (n int) {
	return sovFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFee = fmt.Errorf("proto: unexpected end of group")
)
